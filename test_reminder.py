#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import os
import asyncio
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, ContextTypes
from supabase import create_client

load_dotenv()

class TestReminderBot:
    def __init__(self):
        token = os.getenv("TELEGRAM_BOT_TOKEN")
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_KEY")
        
        self.supabase = create_client(supabase_url, supabase_key)
        self.application = Application.builder().token(token).build()

    async def test_notification_for_vadim(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –í–∞–¥–∏–º"""
        try:
            print("üîç –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –í–∞–¥–∏–º...")
            
            # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
            response = self.supabase.table("clients").select("*").ilike("name", "%–≤–∞–¥–∏–º%").execute()
            
            if not response.data:
                print("‚ùå –ö–ª–∏–µ–Ω—Ç –í–∞–¥–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            client = response.data[0]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç: {client['name']} (ID: {client['id']})")
            
            if not client.get('telegram_chat_id'):
                print("‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç telegram_chat_id")
                return
            
            print(f"üì± Telegram chat_id: {client['telegram_chat_id']}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            tomorrow = datetime.now(ZoneInfo("Europe/Kyiv")) + timedelta(days=1)
            test_appointment = {
                'id': 'test-appointment-' + datetime.now().strftime('%Y%m%d%H%M%S'),
                'scheduled_at': tomorrow.isoformat(),
                'client_name': client['name'],
                'telegram_chat_id': client['telegram_chat_id'],
                'service_name': '–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Å—Å–∞–∂',
                'duration': 60
            }
            
            print(f"üìÖ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ {tomorrow.strftime('%d.%m.%Y %H:%M')}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.send_test_reminder(test_appointment)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    async def send_test_reminder(self, appointment):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            scheduled_at = datetime.fromisoformat(appointment['scheduled_at'])
            formatted_date = scheduled_at.strftime("%d.%m.%Y")
            formatted_time = scheduled_at.strftime("%H:%M")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï

–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –º–∞—Å–∞–∂ –∑–∞–≤—Ç—Ä–∞!

–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {appointment['client_name']}!

–ù–∞–≥–∞–¥—É—î–º–æ, —â–æ –∑–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –º–∞—Å–∞–∂:
–î–∞—Ç–∞: {formatted_date}
–ß–∞—Å: {formatted_time}
–£—Å–ª—É–≥–∞: {appointment['service_name']}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {appointment['duration']} –º–∏–Ω

–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤–æ—é –ø—Ä–∏—Å—É—Ç–Ω—ñ—Å—Ç—å –∞–±–æ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ –∑–º—ñ–Ω–∏.

–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å!"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{appointment['id']}"),
                    InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_{appointment['id']}")
                ],
                [
                    InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"reschedule_{appointment['id']}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.application.bot.send_message(
                chat_id=appointment['telegram_chat_id'],
                text=message,
                reply_markup=reply_markup
            )
            
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {appointment['client_name']}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def check_vadim_appointments(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –í–∞–¥–∏–º"""
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –í–∞–¥–∏–º...")
            
            # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client_response = self.supabase.table("clients").select("*").ilike("name", "%–≤–∞–¥–∏–º%").execute()
            
            if not client_response.data:
                print("‚ùå –ö–ª–∏–µ–Ω—Ç –í–∞–¥–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            client = client_response.data[0]
            client_id = client['id']
            
            # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
            appointments_response = self.supabase.table("appointments").select(
                "id, scheduled_at, status, client_confirmed"
            ).eq("client_id", client_id).execute()
            
            if not appointments_response.data:
                print("üì≠ –£ –∫–ª–∏–µ–Ω—Ç–∞ –í–∞–¥–∏–º –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
                return
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(appointments_response.data)} –∑–∞–ø–∏—Å–µ–π:")
            
            for appointment in appointments_response.data:
                scheduled_at = appointment['scheduled_at']
                # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if scheduled_at.endswith('+00:00'):
                    scheduled_at = scheduled_at[:-6]
                
                scheduled_time = datetime.fromisoformat(scheduled_at)
                time_str = scheduled_time.strftime("%d.%m.%Y %H:%M")
                
                confirmed = "‚úÖ" if appointment.get('client_confirmed') else "‚ùå"
                status = appointment['status']
                
                print(f"  {confirmed} {time_str} - {status}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–µ–π: {e}")

async def main():
    bot = TestReminderBot()
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –í–∞–¥–∏–º
    await bot.check_vadim_appointments()
    
    print("\n" + "=" * 50)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await bot.test_notification_for_vadim()

if __name__ == "__main__":
    asyncio.run(main())
