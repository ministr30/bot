#!/usr/bin/env python3
"""
Telegram-–±–æ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
"""
import os
import re
import logging
from datetime import datetime, timedelta, date
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from supabase import create_client
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
from name_extractor import extract_first_name
from apscheduler.triggers.cron import CronTrigger
from enum import Enum, auto

# –õ–æ–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
from scheduler import TimeSlotScheduler

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import os
log_file_path = os.path.join(os.getcwd(), '..', 'bot.log')
print(f"üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤: {log_file_path}")
print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)-8s | %(name)s:%(funcName)s:%(lineno)d - %(message)s',
    handlers=[
        logging.FileHandler(log_file_path, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('apscheduler').setLevel(logging.WARNING)
logging.getLogger('telegram.ext').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('supabase').setLevel(logging.WARNING)
logging.getLogger('postgrest').setLevel(logging.WARNING)
logging.getLogger('gotrue').setLevel(logging.WARNING)
logging.getLogger('realtime').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)



def normalize_phone(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +380..."""
    original_phone = phone
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã
    phone = re.sub(r'[\s\(\)\-]', '', phone)
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ +380...
    if phone.startswith('+380') and len(phone) == 13:
        print(f"üìû –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–õ–ï–§–û–ù–ê: {original_phone} -> {phone} (—É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω)")
        return phone
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 380 (–±–µ–∑ +)
    if phone.startswith('380') and len(phone) == 12:
        normalized = '+' + phone
        print(f"üìû –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–õ–ï–§–û–ù–ê: {original_phone} -> {normalized}")
        return normalized
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –º–æ–±–∏–ª—å–Ω—ã–π)
    if phone.startswith('0') and len(phone) == 10:
        normalized = '+38' + phone
        print(f"üìû –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–õ–ï–§–û–ù–ê: {original_phone} -> {normalized}")
        return normalized
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –º–æ–±–∏–ª—å–Ω—ã–π)
    if phone.startswith('8') and len(phone) == 11:
        normalized = '+3' + phone
        print(f"üìû –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–õ–ï–§–û–ù–ê: {original_phone} -> {normalized}")
        return normalized
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç +, –Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if phone.startswith('+'):
        # –£–±–∏—Ä–∞–µ–º + –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
        normalized = normalize_phone(phone[1:])
        print(f"üìû –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–õ–ï–§–û–ù–ê: {original_phone} -> {normalized} (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)")
        return normalized
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    print(f"üìû –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–õ–ï–§–û–ù–ê: {original_phone} -> {phone} (–Ω–µ–∏–∑–º–µ–Ω–µ–Ω)")
    return phone

def safe_parse_datetime(date_string: str | None) -> datetime | None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç datetime –∏–∑ —Å—Ç—Ä–æ–∫–∏ ISO —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç Supabase."""
    if not date_string:
        return None
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        processed_date = date_string.replace('Z', '+00:00')



        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã - –ø—Ä–∏–≤–æ–¥–∏–º –∫ 6 —Ü–∏—Ñ—Ä–∞–º
        import re

        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç—ã —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏
        # –ì—Ä—É–ø–ø–∞ 1: –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
        # –ì—Ä—É–ø–ø–∞ 2: –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å 1-9 —Ü–∏—Ñ—Ä)
        # –ì—Ä—É–ø–ø–∞ 3: —Ç–∞–π–º–∑–æ–Ω–∞
        microsecond_pattern = r'(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})\.(\d{1,9})([\+\-]\d{2}:\d{2})'

        match = re.search(microsecond_pattern, processed_date)
        if match:
            date_part = match.group(1)  # 2025-08-30T13:07:01
            microseconds = match.group(2)  # 8814
            timezone = match.group(3)     # +00:00

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –¥–æ 6 —Ü–∏—Ñ—Ä
            if len(microseconds) < 6:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–∏ —Å–ø—Ä–∞–≤–∞: 8814 -> 881400
                microseconds = microseconds.ljust(6, '0')
            elif len(microseconds) > 6:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 6 —Ü–∏—Ñ—Ä: 881400123 -> 881400
                microseconds = microseconds[:6]

            processed_date = f"{date_part}.{microseconds}{timezone}"

        result = datetime.fromisoformat(processed_date)
        return result

    except (ValueError, TypeError) as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: '{date_string}' -> '{processed_date}' | –û—à–∏–±–∫–∞: {e}")
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: '{date_string}'. –û—à–∏–±–∫–∞: {e}")
        return None

def get_days_text(scheduled_date: date):
    today = datetime.now(ZoneInfo("Europe/Kyiv")).date()
    delta = (scheduled_date - today).days
    if delta == 0:
        return "—Å—å–æ–≥–æ–¥–Ω—ñ"
    elif delta == 1:
        return "–∑–∞–≤—Ç—Ä–∞"
    else:
        # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º "—É"
        days_ua = {
            0: "—É –ø–æ–Ω–µ–¥—ñ–ª–æ–∫",
            1: "—É –≤—ñ–≤—Ç–æ—Ä–æ–∫",
            2: "—É —Å–µ—Ä–µ–¥—É",
            3: "—É —á–µ—Ç–≤–µ—Ä",
            4: "—É –ø'—è—Ç–Ω–∏—Ü—é",
            5: "—É —Å—É–±–æ—Ç—É",
            6: "—É –Ω–µ–¥—ñ–ª—é"
        }
        return days_ua[scheduled_date.weekday()]

class BotState(Enum):
    NONE = auto()
    RESCHEDULE_DATE = auto()
    RESCHEDULE_TIME = auto()

class MassageReminderBot:
    def __init__(self, token, supabase_url, supabase_key, admin_chat_id):
        self.supabase = create_client(supabase_url, supabase_key)
        self.application = Application.builder().token(token).build()
        self.scheduler = AsyncIOScheduler()
        self.time_scheduler = TimeSlotScheduler(self.supabase)  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏
        self.user_states = {}  # chat_id: {'state': BotState, ...}
        self.admin_chat_id = admin_chat_id # <-- –°–æ—Ö—Ä–∞–Ω–∏–ª–∏

        # Scheduler –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ polling

        self.setup_handlers()
        self.setup_scheduler()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("my_appointments", self.my_appointments_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(MessageHandler(filters.Regex("^üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏$"), self.my_appointments_command))
        self.application.add_handler(MessageHandler(filters.Regex("^üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞$"), self.support_command))
        self.application.add_handler(MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å$"), self.quick_reschedule_command))
        self.application.add_handler(MessageHandler(filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å$"), self.quick_cancel_command))
        self.application.add_handler(MessageHandler(filters.Regex("^‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–ø–∏—Å$"), self.confirm_appointments_command))
        self.application.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), self.stats_command))
        self.application.add_handler(MessageHandler(filters.CONTACT, self.contact_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.name_handler))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))

    def setup_scheduler(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï)"""
        self.scheduler.add_job(
            self.check_and_send_reminders,
            CronTrigger(minute="*"),
            id="reminder_checker",
            replace_existing=True
        )
        print("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É - –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø)")

    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ asyncio event loop"""
        try:
            self.scheduler.start()
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            raise

    # ----- /start -----
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            chat_id = str(update.effective_chat.id)
            telegram_name = update.effective_chat.first_name or update.effective_chat.username or "Unknown"

            response = self.supabase.table("clients").select("name").eq("telegram_chat_id", chat_id).execute()
            main_keyboard = self.get_persistent_menu(chat_id)
            
            if response.data:
                full_name = response.data[0].get("name", "–ö–ª—ñ—î–Ω—Ç")
                client_name = extract_first_name(full_name)
                client_id = response.data[0].get("id")
                print(f"üöÄ –ö–õ–ò–ï–ù–¢ {client_name} –ó–ê–ü–£–°–¢–ò–õ –ë–û–¢–ê (—á–∞—Ç {chat_id})")
                print(f"‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–ñ–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù: {client_name} (—á–∞—Ç {chat_id})")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.update_user_activity(chat_id, client_id, client_name, "start")

                await update.message.reply_text(
                    f"üéâ –ü—Ä–∏–≤—ñ—Ç, {client_name}!\n–í–∞—à –∞–∫–∞—É–Ω—Ç –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–æ—Ç–∞.\n\n"
                    "–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞—Å–∞–∂.\n\n"
                    "üìù –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∑–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π:\n"
                    "‚Ä¢ üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏ - –ø–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è\n"
                    "‚Ä¢ ‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–ø–∏—Å - —à–≤–∏–¥–∫–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è\n"
                    "‚Ä¢ üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å - —à–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å\n"
                    "‚Ä¢ ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å - —à–≤–∏–¥–∫–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è\n"
                    "‚Ä¢ üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ - –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                    reply_markup=main_keyboard
                )
            else:
                print(f"üì± –ù–ê–ß–ê–õ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ –ù–û–í–´–ô –ö–õ–ò–ï–ù–¢ {user_name} (—á–∞—Ç {chat_id})")

                keyboard = [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                await update.message.reply_text(
                    "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –º–∞—Å–∞–∂!\n\n"
                    "–î–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–æ—Ç–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
                    reply_markup=reply_markup
                )
        except Exception as e:
            chat_id = str(update.effective_chat.id) if update.effective_chat else "unknown"
            user_name = update.effective_chat.first_name if update.effective_chat else "unknown"
            print(f"‚ùå –û–®–ò–ë–ö–ê –í START_COMMAND: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (—á–∞—Ç {chat_id}) - {str(e)}")
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ start_command", exc_info=True)
            try:
                await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    # ----- –ö–æ–Ω—Ç–∞–∫—Ç -----
    async def contact_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            contact = update.message.contact
            phone = contact.phone_number
            chat_id = str(update.effective_chat.id)
            user_name = update.effective_chat.first_name or "Unknown"

            print(f"üì± –ü–û–õ–£–ß–ï–ù –ö–û–ù–¢–ê–ö–¢: {user_name}, —Ç–µ–ª–µ—Ñ–æ–Ω {phone}, ID —á–∞—Ç–∞ {chat_id}")

            main_keyboard = self.get_persistent_menu(chat_id)
            
            client = await self.get_client_by_phone(phone)
            if client:
                print(f"üîó –û–ë–ù–û–í–õ–ï–ù–ò–ï –ß–ê–¢–ê: —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç {client.get('name', 'Unknown')} ({user_name}) –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —á–∞—Ç—É {chat_id}")
                await self.update_client_telegram_id(client["id"], chat_id)
                await update.message.reply_text(
                    f"üéâ –ü—Ä–∏–≤—ñ—Ç, {client.get('name', '–ö–ª—ñ—î–Ω—Ç')}!\n–í–∞—à –∞–∫–∞—É–Ω—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ.\n\n"
                    "üìù –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∑–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ!",
                    reply_markup=main_keyboard
                )
            else:
                print(f"üë§ –ù–û–í–´–ô –ö–õ–ò–ï–ù–¢: –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}")
                context.user_data["pending_phone"] = phone
                context.user_data["pending_chat_id"] = chat_id
                await update.message.reply_text("‚úÖ –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç!\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
        except Exception as e:
            chat_id = str(update.effective_chat.id) if update.effective_chat else "unknown"
            user_name = update.effective_chat.first_name if update.effective_chat else "unknown"
            print(f"‚ùå –û–®–ò–ë–ö–ê –í CONTACT_HANDLER: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (—á–∞—Ç {chat_id}) - {str(e)}")
            try:
                await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    # ----- –ò–º—è -----
    async def name_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message_text = update.message.text
        chat_id = str(update.effective_chat.id)
        user_name = update.effective_chat.first_name or "Unknown"

        if not context.user_data.get("pending_phone"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –Ω–∞—Ö–æ–¥—è—â–µ–µ—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            print(f"üí¨ –ü–†–û–ò–ó–í–û–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï: '{message_text}' –æ—Ç {user_name} (ID —á–∞—Ç–∞: {chat_id}) - –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø—Ä–∞–≤–∫—É")

            await update.message.reply_text(
                "ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –º–∞—Å–∞–∂.\n\n"
                "–Ø –≤–º—ñ—é —Ç—ñ–ª—å–∫–∏:\n"
                "üìã –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤–∞—à—ñ –∑–∞–ø–∏—Å–∏\n"
                "üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç–∏ –∑–∞–ø–∏—Å–∏\n"
                "‚ùå –°–∫–∞—Å–æ–≤—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å–∏\n"
                "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å–∏\n"
                "üí¨ –ù–∞–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∑–≤'—è–∑–∫—É\n\n"
                "üìû –Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ—Å—å —ñ–Ω—à–µ ‚Äî "
                "–∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ: (096) 35-102-35\n\n"
                "üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π!",
                reply_markup=self.get_persistent_menu(chat_id)
            )
            return
        try:
            name = update.message.text.strip()
            if len(name) < 2 or len(name) > 50 or re.search(r'[<>"\']', name):
                await update.message.reply_text("‚ùå –Ü–º'—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
                return

            phone = context.user_data["pending_phone"]
            chat_id = context.user_data["pending_chat_id"]

            print(f"üìù –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ö–õ–ò–ï–ù–¢–ê: {name}, —Ç–µ–ª–µ—Ñ–æ–Ω {phone}, —á–∞—Ç {chat_id}")

            await self.create_new_client(name, phone, chat_id)
            context.user_data.clear()
            
            # Provide persistent menu after successful registration
            main_keyboard = self.get_persistent_menu(chat_id)
            await update.message.reply_text(
                f"üéâ –í—ñ–¥–º—ñ–Ω–Ω–æ, {name}!\n–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥–æ –±–æ—Ç–∞.\n\n"
                "üìù –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∑–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π!",
                reply_markup=main_keyboard
            )
        except Exception as e:
            chat_id = str(update.effective_chat.id) if update.effective_chat else "unknown"
            user_name = update.effective_chat.first_name if update.effective_chat else "unknown"
            message_text = update.message.text if update.message else "unknown"
            print(f"‚ùå –û–®–ò–ë–ö–ê –í NAME_HANDLER: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (—á–∞—Ç {chat_id}), —Å–æ–æ–±—â–µ–Ω–∏–µ '{message_text}' - {str(e)}")
            try:
                await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    # ----- Callback -----
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            query = update.callback_query
            
            # Handle expired callback queries gracefully
            try:
                await query.answer()
            except Exception as callback_error:
                # If callback is expired, send a new message with fresh buttons
                if "Query is too old" in str(callback_error) or "query id is invalid" in str(callback_error):
                    await self.handle_expired_callback(query, update)
                    return
                else:
                    raise callback_error
            
            data = query.data
            chat_id = str(query.message.chat_id)

            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            print(f"üîò –ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò: '{data}' –æ—Ç —á–∞—Ç–∞ {chat_id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                client_resp = self.supabase.table("clients").select("id, name").eq("telegram_chat_id", chat_id).execute()
                if client_resp.data:
                    client_id = client_resp.data[0]['id']
                    full_name = client_resp.data[0]['name']
                    client_name = extract_first_name(full_name)
                    await self.update_user_activity(chat_id, client_id, client_name, f"button_{data[:20]}")  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            except Exception as stat_error:
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                print(f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ö–ù–û–ü–û–ö: {str(stat_error)}")

            user_state = self.user_states.setdefault(chat_id, {'state': BotState.NONE})

            if data == "reschedule_cancel":
                self.user_states[chat_id] = {'state': BotState.NONE}
                await query.edit_message_text("‚ùå –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                return
            if data == "reschedule_back_date":
                await self.show_reschedule_dates(query)
                user_state['state'] = BotState.RESCHEDULE_DATE
                return
            if data == "reschedule_back_time":
                date_str = user_state.get('selected_date')
                if date_str:
                    await self.show_free_slots(query, chat_id, date_str)
                    user_state['state'] = BotState.RESCHEDULE_TIME
                return

            elif data.startswith("confirm_appointment_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!)
                appointment_id = data.replace("confirm_appointment_", "")
                await self.handle_appointment_confirmation(query, appointment_id)
            elif data.startswith("select_confirm_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                appointment_id = data.replace("select_confirm_", "")
                await self.show_confirm_confirmation(query, appointment_id)
            elif data.startswith("select_cancel_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
                appointment_id = data.replace("select_cancel_", "")
                await self.show_cancel_confirmation(query, appointment_id)
            elif data.startswith("select_reschedule_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
                appointment_id = data.replace("select_reschedule_", "")
                await self.show_reschedule_dates_for_appointment(query, appointment_id)
            elif data.startswith("confirm_"):
                await self.handle_confirmation(query, data.replace("confirm_", ""), "confirm")
            elif data.startswith("cancel_"):
                await self.handle_confirmation(query, data.replace("cancel_", ""), "cancel")
            elif data.startswith("reschedule_time_"):
                if user_state.get('state') == BotState.RESCHEDULE_TIME:
                    time_str = data.replace("reschedule_time_", "")
                    await self.handle_reschedule_time(query, context, chat_id, time_str)
                else:
                    await query.edit_message_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è")
            elif data.startswith("reschedule_date_"):
                if user_state.get('state') == BotState.RESCHEDULE_DATE:
                    date_str = data.replace("reschedule_date_", "")
                    date_dt = datetime.strptime(date_str, "%d.%m.%Y").date()
                    if date_dt.weekday() == 6:
                        buttons = [[InlineKeyboardButton("–û–ö", callback_data="reschedule_back_date")]]
                        reply_markup = InlineKeyboardMarkup(buttons)
                        await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å –Ω–∞ –Ω–µ–¥—ñ–ª—é –Ω–µ–º–æ–∂–ª–∏–≤–∏–π. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É.", reply_markup=reply_markup)
                        return
                    user_state['selected_date'] = date_str
                    user_state['state'] = BotState.RESCHEDULE_TIME
                    await self.show_free_slots(query, chat_id, date_str)
            elif data == "contact_admin":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                await query.edit_message_text(
                    "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\n"
                    "üì± –¢–µ–ª–µ—Ñ–æ–Ω: (096) 35-102-35\n"
                    "üí¨ –ü–∏—à—ñ—Ç—å –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å!",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
                )
            elif data == "back_to_main":
                # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await query.edit_message_text(
                    "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                    reply_markup=self.get_persistent_menu(chat_id)
                )
            elif data.startswith("reschedule_"):
                appointment_id = data.replace("reschedule_", "")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                appointment_response = self.supabase.table("appointments").select("reschedule_source").eq("id", appointment_id).execute()
                if appointment_response.data and appointment_response.data[0].get('reschedule_source') == 'ADMIN':
                    # –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.edit_message_text("üîÑ –î–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reschedule.")
                    return
                
                user_state['appointment_id'] = appointment_id
                user_state['state'] = BotState.RESCHEDULE_DATE
                await self.show_reschedule_dates(query)
            else:
                await query.edit_message_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è")
        except Exception as e:
            data_info = data if 'data' in locals() else "unknown"
            chat_id = str(update.effective_chat.id) if update.effective_chat else "unknown"
            user_name = update.effective_chat.first_name if update.effective_chat else "unknown"
            print(f"‚ùå –û–®–ò–ë–ö–ê –í BUTTON_CALLBACK: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (—á–∞—Ç {chat_id}), –∫–Ω–æ–ø–∫–∞ '{data_info}' - {str(e)}")
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ button_callback", exc_info=True)
            try:
                # Try to handle expired callbacks with fresh message
                if "Query is too old" in str(e) or "query id is invalid" in str(e):
                    await self.handle_expired_callback(update.callback_query, update)
                else:
                    await update.callback_query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                # If edit fails, send new message with persistent menu
                try:
                    await update.effective_chat.send_message(
                        "‚ùå –ß–∞—Å –¥—ñ—ó –∫–Ω–æ–ø–æ–∫ –º–∏–Ω—É–≤. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                        reply_markup=self.get_persistent_menu(chat_id)
                    )
                except Exception:
                    pass

    async def handle_expired_callback(self, query, update):
        """Handle expired callback queries by providing alternative options"""
        try:
            chat_id = str(query.message.chat_id)
            
            # Try to extract appointment ID from the callback data if possible
            data = query.data if hasattr(query, 'data') else ''
            appointment_id = None
            
            if data.startswith("confirm_"):
                appointment_id = data.replace("confirm_", "")
                action_text = "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–ø–∏—Å"
            elif data.startswith("cancel_"):
                appointment_id = data.replace("cancel_", "")
                action_text = "—Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å"
            elif data.startswith("reschedule_"):
                appointment_id = data.replace("reschedule_", "")
                action_text = "–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å"
            else:
                action_text = "–≤–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—é"
            
            # Send new message with fresh persistent buttons and instructions
            message = (
                f"‚è∞ –ß–∞—Å –¥—ñ—ó –∫–Ω–æ–ø–æ–∫ –º–∏–Ω—É–≤.\n\n"
                f"–©–æ–± {action_text}, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ –∞–±–æ –∫–æ–º–∞–Ω–¥–∞–º–∏:\n\n"
                f"üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏ - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏\n"
                f"üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å - —à–≤–∏–¥–∫–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è\n"
                f"‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å - —à–≤–∏–¥–∫–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è"
            )
            
            # Add persistent reply keyboard
            persistent_keyboard = self.get_persistent_menu(chat_id)
            
            # If we have appointment ID, also add fresh inline buttons
            if appointment_id:
                # Create fresh inline buttons
                fresh_buttons = [
                    [
                        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{appointment_id}"),
                        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_{appointment_id}")
                    ],
                    [
                        InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"reschedule_{appointment_id}")
                    ]
                ]
                fresh_inline_markup = InlineKeyboardMarkup(fresh_buttons)
                
                await update.effective_chat.send_message(
                    message + "\n\n–ê–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —Å–≤—ñ–∂–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:",
                    reply_markup=persistent_keyboard
                )
                
                # Send fresh inline buttons in separate message
                await update.effective_chat.send_message(
                    "üîÑ –°–≤—ñ–∂—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π:",
                    reply_markup=fresh_inline_markup
                )
            else:
                await update.effective_chat.send_message(
                    message,
                    reply_markup=persistent_keyboard
                )
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ–≥–æ callback: {e}")
            # Fallback - just send persistent menu
            try:
                await update.effective_chat.send_message(
                    "‚ùå –ß–∞—Å –¥—ñ—ó –∫–Ω–æ–ø–æ–∫ –º–∏–Ω—É–≤. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é:",
                    reply_markup=self.get_persistent_menu(chat_id)
                )
            except Exception:
                pass

    def get_persistent_menu(self, chat_id=None):
        """Get persistent reply keyboard menu"""
        # –ë–∞–∑–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        menu_buttons = [
                ["üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", "üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞"],
            ["üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å"],
            ["‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–ø–∏—Å"]
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if chat_id and str(chat_id) == str(self.admin_chat_id):
            menu_buttons.append(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

        return ReplyKeyboardMarkup(
            menu_buttons,
            resize_keyboard=True,
            one_time_keyboard=False
        )

    # ----- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ -----
    async def handle_confirmation(self, query, appointment_id: str, action: str):
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –µ–≥–æ –∏–º–µ–Ω–∏
            appointment_resp = self.supabase.table("appointments").select("client_id").eq("id", appointment_id).execute()
            if not appointment_resp.data:
                await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return

            client_id = appointment_resp.data[0]['client_id']
            client_resp = self.supabase.table("clients").select("name").eq("id", client_id).execute()
            full_name = client_resp.data[0]['name'] if client_resp.data else "–ö–ª—ñ—î–Ω—Ç"
            client_name = extract_first_name(full_name)

            # --- –ó–∞–≥–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø–∏—Å—É ---
            # –ú–∏ –æ—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Å—É –î–û —Ç–æ–≥–æ, —è–∫ –≤–∏—Ä—ñ—à–∏—Ç–∏, —â–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ.
            appointment_details_resp = self.supabase.table("appointments").select(
                "scheduled_at, service_id"
            ).eq("id", appointment_id).execute()

            service_name = "–º–∞—Å–∞–∂"
            formatted_date = ""
            formatted_time = ""
            details_available = False

            if appointment_details_resp.data:
                appointment = appointment_details_resp.data[0]
                service_resp = self.supabase.table("services").select("name").eq("id", appointment['service_id']).execute()
                if service_resp.data:
                    service_name = service_resp.data[0]['name']

                dt_raw = safe_parse_datetime(appointment.get('scheduled_at'))
                if dt_raw:
                    scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))
                    formatted_date = scheduled_at.strftime("%d.%m.%Y")
                    formatted_time = scheduled_at.strftime("%H:%M")
                    details_available = True # –§–ª–∞–≥, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

            # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è CONFIRM (–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ) ---
            if action == "confirm":
                self.supabase.table("appointments").update({
                    "client_confirmed": True,
                    "confirmation_time": datetime.now(ZoneInfo("Europe/Kyiv")).isoformat()
                }).eq("id", appointment_id).execute()

                await self.send_confirmation_notification(query, appointment_id, client_name)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
                admin_message = f"‚úÖ –ö–ª—ñ—î–Ω—Ç {client_name} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –∑–∞–ø–∏—Å."
                if details_available:
                    admin_message = f"‚úÖ –ö–ª—ñ—î–Ω—Ç {client_name} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –∑–∞–ø–∏—Å\nüìÖ {formatted_date} –æ {formatted_time}\nüíÜ {service_name}"

                await self.application.bot.send_message(chat_id=self.admin_chat_id, text=admin_message)

            # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è CANCEL (–û—Ç–º–µ–Ω–∞) ---
            elif action == "cancel":
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É –Ω–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π
                update_result = self.supabase.table("appointments").update({
                    "status": "cancelled",
                    "notes": f"–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–æ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞ {datetime.now(ZoneInfo('Europe/Kyiv')).strftime('%d.%m.%Y %H:%M')}"
                }).eq("id", appointment_id).execute()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                if update_result.data:
                    logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É {appointment_id} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 'cancelled'")
                else:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–ø–∏—Å—É {appointment_id}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                check_response = self.supabase.table("appointments").select("status, notes").eq("id", appointment_id).execute()
                if check_response.data:
                    actual_status = check_response.data[0]['status']
                    actual_notes = check_response.data[0].get('notes', '')
                    logger.info(f"üìä –ê–∫—Ç—É–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É {appointment_id}: {actual_status}")
                    logger.info(f"üìù –ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –∑–∞–ø–∏—Å—É: {actual_notes}")

                    if actual_status != "cancelled":
                        logger.error(f"‚ùå –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É {appointment_id} –Ω–µ –±—É–ª–æ –æ–Ω–æ–≤–ª–µ–Ω–æ! –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {actual_status}")
                        # –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —â–µ —Ä–∞–∑
                        retry_result = self.supabase.table("appointments").update({
                            "status": "cancelled"
                        }).eq("id", appointment_id).execute()
                        if retry_result.data:
                            logger.info(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–ø–∏—Å—É {appointment_id} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
                        else:
                            logger.error(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–ø–∏—Å—É {appointment_id} –Ω–µ –≤–¥–∞–ª–æ—Å—è")
                    else:
                        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É {appointment_id} –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 'cancelled'")
                else:
                    logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É {appointment_id}")

                await self.send_cancellation_notification(query, appointment_id, client_name)

                # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
                admin_message = f"‚ùå –ö–ª—ñ—î–Ω—Ç {client_name} —Å–∫–∞—Å—É–≤–∞–≤ –∑–∞–ø–∏—Å."
                if details_available:
                    admin_message = f"‚ùå –ö–ª—ñ—î–Ω—Ç {client_name} —Å–∫–∞—Å—É–≤–∞–≤ –∑–∞–ø–∏—Å\nüìÖ {formatted_date} –æ {formatted_time}\nüíÜ {service_name}"

                await self.application.bot.send_message(chat_id=self.admin_chat_id, text=admin_message)

        except Exception as e:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_confirmation", exc_info=True)
            try:
                await query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    async def show_reschedule_dates(self, query):
        today = datetime.now(ZoneInfo("Europe/Kyiv")).date()
        buttons = []
        for i in range(7):  # 7 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
            d = today + timedelta(days=i)
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            if d.weekday() == 6:
                continue
            buttons.append([
                InlineKeyboardButton(
                    d.strftime("%d.%m.%Y"),
                    callback_data=f"reschedule_date_{d.strftime('%d.%m.%Y')}"
                )
            ])
        buttons.append([
            InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∞", callback_data="reschedule_cancel")
        ])
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å—É:", reply_markup=reply_markup)

    async def show_free_slots(self, query, chat_id, date_str):
        try:
            await query.edit_message_text("‚è≥ –û–±—Ä–æ–±–∫–∞...", reply_markup=None)
            import time
            t0 = time.time()
            date_dt = datetime.strptime(date_str, "%d.%m.%Y").date()

            if date_dt.weekday() == 6:
                await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å –Ω–∞ –Ω–µ–¥—ñ–ª—é –Ω–µ–º–æ–∂–ª–∏–≤–∏–π. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É.")
                return

            user_state = self.user_states.get(chat_id, {})
            appointment_id = user_state.get('appointment_id')
            if not appointment_id:
                await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑–∞–ø–∏—Å—É.")
                return

            old_appointment = self.supabase.table("appointments").select("service_id, appointment_type, total_duration").eq("id", appointment_id).execute().data
            if not old_appointment:
                await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            appointment = old_appointment[0]
            appointment_type = appointment.get('appointment_type', 'single')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
            if appointment_type == 'package':
                duration = appointment.get('total_duration', 60)
                free_slots = await self.time_scheduler.get_free_slots_for_package(date_dt, duration)
            else:
                service_id = appointment['service_id']
                service_resp = self.supabase.table("services").select("duration_minutes").eq("id", service_id).execute()
                duration = service_resp.data[0]['duration_minutes'] if service_resp.data else 60
                free_slots = await self.time_scheduler.get_free_slots(date_dt, duration)
            t1 = time.time()
            print(f"[PERF] –†–∞—Å—á–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∑–∞–Ω—è–ª {t1-t0:.2f} —Å–µ–∫")

            if not free_slots:
                await query.edit_message_text("‚ùå –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –Ω–∞ —Ü—é –¥–∞—Ç—É.")
                return

            formatted_slots = [dt.strftime("%H:%M") for dt in free_slots]
            buttons = [[InlineKeyboardButton(t, callback_data=f"reschedule_time_{t}")] for t in formatted_slots]
            buttons.append([
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="reschedule_back_date"),
                InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∞", callback_data="reschedule_cancel")
            ])
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(f"–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ {date_str}:", reply_markup=reply_markup)

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ show_free_slots", exc_info=True)
            try:
                await query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    async def handle_reschedule_time(self, query, context, chat_id, time_str):
        try:
            await query.edit_message_text("‚è≥ –û–±—Ä–æ–±–∫–∞...", reply_markup=None)
            user_state = self.user_states.get(chat_id, {})
            appointment_id = user_state.get('appointment_id')
            date_str = user_state.get('selected_date')

            if not appointment_id or not date_str:
                await query.edit_message_text("‚ùå –î–∞–Ω—ñ –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            date_dt = datetime.strptime(date_str, "%d.%m.%Y").date()
            new_time = datetime.strptime(time_str, "%H:%M").time()
            new_dt_kyiv = datetime.combine(date_dt, new_time).replace(tzinfo=ZoneInfo("Europe/Kyiv"))
            new_dt_utc = new_dt_kyiv.astimezone(ZoneInfo("UTC"))

            old_appointment = self.supabase.table("appointments").select("*").eq("id", appointment_id).execute().data
            if not old_appointment:
                await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            old = old_appointment[0]
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            old_dt_raw = safe_parse_datetime(old['scheduled_at'])
            if not old_dt_raw:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π: id={old.get('id')}")
                await query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                return
            old_dt = old_dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))
            old_date_str = old_dt.strftime("%d.%m.%Y")
            old_time_str = old_dt.strftime("%H:%M")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
            appointment_type = old.get('appointment_type', 'single')
            if appointment_type == 'package':
                duration = old.get('total_duration', 60)
                free_slots = await self.time_scheduler.get_free_slots_for_package(date_dt, duration)
            else:
                service_id = old['service_id']
                service_resp = self.supabase.table("services").select("duration_minutes").eq("id", service_id).execute()
                duration = service_resp.data[0]['duration_minutes'] if service_resp.data else 60
                free_slots = await self.time_scheduler.get_free_slots(date_dt, duration)
            allowed_times = [dt.strftime("%H:%M") for dt in free_slots]

            if time_str not in allowed_times:
                await query.edit_message_text("‚ùå –¶–µ–π —Å–ª–æ—Ç –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            service_resp = self.supabase.table("services").select("duration_minutes, price, name").eq("id", service_id).execute()
            service_info = service_resp.data[0] if service_resp.data else None
            base_price = service_info['price'] if service_info else old['price']
            service_name = service_info['name'] if service_info else "–º–∞—Å–∞–∂"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–π –∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            original_date = old_dt.date()
            original_is_sunday = original_date.weekday() == 6
            new_is_sunday = date_dt.weekday() == 6
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–Ω—É
            if new_is_sunday:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–¥–±–∞–≤–∫—É –∫ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–µ
                final_price = base_price + 100.0
            elif original_is_sunday and not new_is_sunday:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –Ω–∞ –±—É–¥–Ω–∏–π –¥–µ–Ω—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
                final_price = base_price
            else:
                # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∑–∞–ø–∏—Å–∏
                final_price = old['price']
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–º–µ—Ç–∫–∏: —É–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ–Ω–æ—Å–µ
            old_notes = old.get('notes', '') or ''
            import re
            clean_notes = old_notes.strip()
            clean_notes = re.sub(r'–ü–ï–†–ï–ù–ï–°–ï–ù–û –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú,?\s*', '', clean_notes, flags=re.IGNORECASE)
            clean_notes = re.sub(r'–ü–ï–†–ï–ù–ï–°–ï–ù–û –ö–õ–ò–ï–ù–¢–û–ú,?\s*', '', clean_notes, flags=re.IGNORECASE)
            clean_notes = re.sub(r'–ü–ï–†–ï–ù–ï–°–ï–ù–û –ö–õ–Ü–Ñ–ù–¢–û–ú,?\s*', '', clean_notes, flags=re.IGNORECASE)
            clean_notes = re.sub(r'^,\s*', '', clean_notes, flags=re.IGNORECASE)  # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ
            clean_notes = re.sub(r',\s*$', '', clean_notes, flags=re.IGNORECASE)  # –£–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ
            clean_notes = clean_notes.strip()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—á–∏—â–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏
            notes = clean_notes
            reschedule_source = "CLIENT"  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞
            
            print(f"üîÑ Telegram Bot: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏:")
            print(f"   - ID: {appointment_id}")
            print(f"   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {original_date} (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: {original_is_sunday})")
            print(f"   - –ù–æ–≤–∞—è –¥–∞—Ç–∞: {date_dt} (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: {new_is_sunday})")
            print(f"   - –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ —É—Å–ª—É–≥–∏: {base_price}")
            print(f"   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–ø–∏—Å–∏: {old['price']}")
            print(f"   - –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {final_price}")
            print(f"   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏: '{old_notes}'")
            print(f"   - –û—á–∏—â–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏: '{clean_notes}'")
            print(f"   - –ù–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏: '{notes}'")
            print(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ–Ω–æ—Å–∞: {reschedule_source}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
            update_data = {
                "scheduled_at": new_dt_utc.isoformat(),
                "notes": notes,
                "price": final_price,
                "status": "scheduled",
                "reschedule_source": reschedule_source,  # üîΩ –ù–æ–≤–æ–µ –ø–æ–ª–µ
                "client_confirmed": False,  # üîΩ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ
                "confirmation_time": None   # üîΩ –û—á–∏—â–∞–µ–º –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            }
            self.supabase.table("appointments").update(update_data).eq("id", appointment_id).execute()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client = self.supabase.table("clients").select("name").eq("id", old['client_id']).execute().data
            full_name = client[0]['name'] if client else "–ö–ª—ñ—î–Ω—Ç"
            client_name = extract_first_name(full_name)
            
            print(f"üîÑ –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞: {appointment_id}, —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            new_date_str = date_str
            new_time_str = new_dt_kyiv.strftime("%H:%M")
            await self.send_client_reschedule_notification(
                query, appointment_id, client_name, 
                old_date_str, old_time_str, 
                new_date_str, new_time_str
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await self.application.bot.send_message(
                chat_id=self.admin_chat_id,
                text=f"üîÑ –ö–ª—ñ—î–Ω—Ç {client_name} –ø–µ—Ä–µ–Ω—ñ—Å –∑–∞–ø–∏—Å\nüíÜ {service_name}\nüìÖ –ó {old_date_str} –æ {old_time_str} –Ω–∞ {new_date_str} –æ {new_time_str}."
            )

            self.user_states[chat_id] = {'state': BotState.NONE}
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ handle_reschedule_time", exc_info=True)
            try:
                await query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    # ----- Supabase helpers -----
    async def get_client_by_phone(self, phone: str):
        normalized_phone = normalize_phone(phone)
        response = self.supabase.table("clients").select("*").eq("phone", normalized_phone).execute()
        return response.data[0] if response.data else None

    async def create_new_client(self, name: str, phone: str, chat_id: str):
        normalized_phone = normalize_phone(phone)
        print(f"üÜï –°–û–ó–î–ê–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê –í –ë–ê–ó–ï: {name}, {normalized_phone}, —á–∞—Ç {chat_id}")

        data = {
            "name": name,
            "phone": normalized_phone,
            "telegram_chat_id": chat_id,
            "notification_opt_in": True,
            "timezone": "Europe/Kyiv",
            "telegram_linked_at": datetime.now(ZoneInfo("Europe/Kyiv")).isoformat(),
            "created_at": datetime.now(ZoneInfo("Europe/Kyiv")).isoformat()
        }
        response = self.supabase.table("clients").insert(data).execute()

        if response.data:
            client_id = response.data[0]['id']
            print(f"‚úÖ –ö–õ–ò–ï–ù–¢ –°–û–ó–î–ê–ù: ID {client_id} –¥–ª—è {name}")
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê: {name}")

        return response.data[0] if response.data else None

    async def update_client_telegram_id(self, client_id: str, chat_id: str):
        data = {
            "telegram_chat_id": chat_id,
            "telegram_linked_at": datetime.now(ZoneInfo("Europe/Kyiv")).isoformat(),
            "notification_opt_in": True
        }
        response = self.supabase.table("clients").update(data).eq("id", client_id).execute()
        return len(response.data) > 0

    # ----- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è -----
    async def check_and_send_reminders(self):
        try:
            now = datetime.now(ZoneInfo("Europe/Kyiv"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            if hasattr(self, '_reminder_check_in_progress') and self._reminder_check_in_progress:
                print("‚è∞ –ü–†–û–í–ï–†–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –£–ñ–ï –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø - –ü–†–û–ü–£–°–ö–ê–Æ")
                return
            
            self._reminder_check_in_progress = True
            print(f"üöÄ –ù–ê–ß–ò–ù–ê–Æ –ü–†–û–í–ï–†–ö–£ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô: {now.strftime('%d.%m.%Y %H:%M:%S')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏
            if not self.is_working_hours(now):
                print(f"‚è∞ –í–ù–ï –†–ê–ë–û–ß–ï–ì–û –í–†–ï–ú–ï–ù–ò: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è")
                self._reminder_check_in_progress = False
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–≤–Ω–æ 2-2.25 —á–∞—Å–∞ –Ω–∞–∑–∞–¥)
            two_hours_ago = now - timedelta(hours=2)
            two_hours_fifteen_minutes_ago = now - timedelta(hours=2, minutes=15)
            print(f"üîç –ò–©–£ –ù–û–í–´–ï –ó–ê–ü–ò–°–ò: –ø—Ä–æ–≤–µ—Ä—è—é –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å {two_hours_fifteen_minutes_ago.strftime('%H:%M')} –¥–æ {two_hours_ago.strftime('%H:%M')}")

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ 2-2.25 —á–∞—Å–∞ –Ω–∞–∑–∞–¥ (15-–º–∏–Ω—É—Ç–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏)
            new_appointments_response = self.supabase.table("appointments").select(
                "id, created_at, appointment_type, total_duration"
            ).eq("status", "scheduled").gte("created_at", two_hours_fifteen_minutes_ago.isoformat()).lt("created_at", two_hours_ago.isoformat()).execute()

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            filtered_appointments = []
            if new_appointments_response.data:
                for appointment in new_appointments_response.data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if await self.check_notification_sent(appointment['id'], "new_appointment"):
                        logger.debug(f"üì≠ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment['id']} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        continue

                    # –ó–∞–ø–∏—Å—å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å–æ–∑–¥–∞–Ω–∞ 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥)
                    filtered_appointments.append(appointment)
                    logger.debug(f"üì≠ –ó–∞–ø–∏—Å—å {appointment['id']} –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å–æ–∑–¥–∞–Ω–∞: {appointment['created_at']})")

            # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º
            new_appointments_response.data = filtered_appointments

            if new_appointments_response.data:
                logger.info(f"üì≠ –ó–Ω–∞–π–¥–µ–Ω–æ {len(new_appointments_response.data)} –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")
                for appointment in new_appointments_response.data:
                    logger.info(f"üì≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å: {appointment['id']}, —Å–æ–∑–¥–∞–Ω–∞: {appointment['created_at']}")
                    await self.send_new_appointment_notification(appointment['id'])
            else:
                logger.info("üì≠ –ù–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –∑–∞–ø–∏—Å–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            admin_reschedule_response = self.supabase.table("appointments").select(
                "id, scheduled_at, client_id, service_id, status, reschedule_source, client_confirmed"
            ).eq("status", "scheduled").eq("reschedule_source", "ADMIN").eq("client_confirmed", False).execute()

            if admin_reschedule_response.data:
                print(f"üîÑ –ó–Ω–∞–π–¥–µ–Ω–æ {len(admin_reschedule_response.data)} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Å—ñ–≤")
                for appointment in admin_reschedule_response.data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if await self.should_send_admin_reschedule_notification(appointment['id'], appointment['scheduled_at']):
                        await self.send_admin_reschedule_notification(appointment['id'])
                    else:
                        print(f"‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment['id']} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                print("üîÑ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º 24-—á–∞—Å–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞–≤—Ç—Ä–∞)
            tomorrow_start = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
            tomorrow_end = tomorrow_start + timedelta(days=1)

            response_24h = self.supabase.table("appointments").select(
                "id, scheduled_at, client_id, service_id, status, appointment_type, total_duration"
            ).eq("status", "scheduled").gte("scheduled_at", tomorrow_start.isoformat()).lt("scheduled_at", tomorrow_end.isoformat()).execute()

            regular_24h_count = 0
            if response_24h.data:
                print(f"üì≠ –ó–Ω–∞–π–¥–µ–Ω–æ {len(response_24h.data)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è 24-–≥–æ–¥–∏–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")
                for appointment in response_24h.data:
                    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
                    # –≠—Ç–æ –∑–∞—â–∏—Ç–∏—Ç –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                    two_hours_ago = now - timedelta(hours=2)
                    recent_24h_logs = self.supabase.table("notification_logs").select(
                        "id"
                    ).eq("appointment_id", appointment['id']).eq("type", "24h").eq("status", "sent").gte("sent_at", two_hours_ago.isoformat()).execute()

                    if not recent_24h_logs.data:
                        await self.process_appointment_reminder(appointment, now, "24h")
                        regular_24h_count += 1
            else:
                print("üì≠ –ó–∞–≤—Ç—Ä–∞ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è 24-–≥–æ–¥–∏–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º 1-—á–∞—Å–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–µ—Ä–µ–∑ —á–∞—Å)
            one_hour_from_now = now + timedelta(hours=1)
            one_hour_start = one_hour_from_now.replace(second=0, microsecond=0)
            one_hour_end = one_hour_start + timedelta(minutes=15)  # 15-–º–∏–Ω—É—Ç–Ω–æ–µ –æ–∫–Ω–æ

            response_1h = self.supabase.table("appointments").select(
                "id, scheduled_at, client_id, service_id, status, appointment_type, total_duration"
            ).eq("status", "scheduled").gte("scheduled_at", one_hour_start.isoformat()).lt("scheduled_at", one_hour_end.isoformat()).execute()

            regular_1h_count = 0
            if response_1h.data:
                print(f"üì≠ –ó–Ω–∞–π–¥–µ–Ω–æ {len(response_1h.data)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è 1-–≥–æ–¥–∏–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")
                for appointment in response_1h.data:
                    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 45 –º–∏–Ω—É—Ç
                    # –≠—Ç–æ –∑–∞—â–∏—Ç–∏—Ç –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                    forty_five_minutes_ago = now - timedelta(minutes=45)
                    recent_1h_logs = self.supabase.table("notification_logs").select(
                        "id"
                    ).eq("appointment_id", appointment['id']).eq("type", "1h").eq("status", "sent").gte("sent_at", forty_five_minutes_ago.isoformat()).execute()

                    if not recent_1h_logs.data:
                        await self.process_appointment_reminder(appointment, now, "1h")
                        regular_1h_count += 1
            else:
                print("üì≠ –ß–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è 1-–≥–æ–¥–∏–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")

            if regular_24h_count > 0 or regular_1h_count > 0:
                print(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: 24h={regular_24h_count}, 1h={regular_1h_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞ (—á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ 24-—á–∞—Å–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
            six_hours_ago = now - timedelta(hours=6)
            no_response_appointments_response = self.supabase.table("appointments").select(
                "id, scheduled_at, client_id, service_id, status, appointment_type, total_duration"
            ).eq("status", "scheduled").gte("scheduled_at", tomorrow_start.isoformat()).lt("scheduled_at", tomorrow_end.isoformat()).execute()

            if no_response_appointments_response.data:
                print(f"üì≠ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ {len(no_response_appointments_response.data)} –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                for appointment in no_response_appointments_response.data:
                    await self.check_no_response_reminder(appointment, now)
            else:
                print("üì≠ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)
            await self.send_delayed_notifications(now)

            print(f"‚úÖ –ü–†–û–í–ï–†–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù–ê: {datetime.now(ZoneInfo('Europe/Kyiv')).strftime('%H:%M:%S')}")
                
        except Exception as e:
            print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –ü–†–ò –ü–ï–†–ï–í–Ü–†–¶–Ü –ù–ê–ì–ê–î–£–í–ê–ù–¨: {e}")
        finally:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            self._reminder_check_in_progress = False

    async def process_appointment_reminder_no_response(self, appointment, now):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞ no_response"""
        try:
            client_response = self.supabase.table("clients").select(
                "name, telegram_chat_id, notification_opt_in"
            ).eq("id", appointment['client_id']).execute()
            if not client_response.data:
                return

            client = client_response.data[0]
            if not client.get('telegram_chat_id') or not client.get('notification_opt_in'):
                return

            service_response = self.supabase.table("services").select(
                "name, duration_minutes"
            ).eq("id", appointment['service_id']).execute()
            if not service_response.data:
                return

            service = service_response.data[0]
            appointment_data = {
                'id': appointment['id'],  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å appointment_id –Ω–∞ id
                'appointment_id': appointment['id'],  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                'scheduled_at': appointment['scheduled_at'],
                'client_name': extract_first_name(client['name']),
                'telegram_chat_id': client['telegram_chat_id'],
                'service_name': service['name'],
                'duration': service['duration_minutes'],
                'appointment_type': appointment.get('appointment_type', 'single'),
                'total_duration': appointment.get('total_duration')
            }
            await self.process_reminder_no_response(appointment_data, now)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")

    async def process_appointment_reminder(self, appointment, now, reminder_type="24h"):
        try:
            client_response = self.supabase.table("clients").select(
                "name, telegram_chat_id, notification_opt_in"
            ).eq("id", appointment['client_id']).execute()
            if not client_response.data:
                return

            client = client_response.data[0]
            if not client.get('telegram_chat_id') or not client.get('notification_opt_in'):
                return

            service_response = self.supabase.table("services").select(
                "name, duration_minutes"
            ).eq("id", appointment['service_id']).execute()
            if not service_response.data:
                return

            service = service_response.data[0]
            appointment_data = {
                'id': appointment['id'],  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å appointment_id –Ω–∞ id
                'appointment_id': appointment['id'],  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                'scheduled_at': appointment['scheduled_at'],
                'client_name': extract_first_name(client['name']),
                'telegram_chat_id': client['telegram_chat_id'],
                'duration': service['duration_minutes'],
                'appointment_type': appointment.get('appointment_type', 'single'),
                'total_duration': appointment.get('total_duration')
            }

            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            if dt_raw:
                scheduled_time = dt_raw.astimezone(ZoneInfo("Europe/Kyiv")).strftime('%d.%m.%Y %H:%M')
                print(f"‚è∞ –ì–û–¢–û–í–õ–Æ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: {reminder_type} –¥–ª—è {extract_first_name(client['name'])} –Ω–∞ {scheduled_time}")

            await self.process_reminder(appointment_data, now, reminder_type)
        except Exception as e:
            print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –ü–†–ò –û–ë–†–û–ë–¶–Ü –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø: {e}")

    async def process_reminder_no_response(self, appointment, now):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞ no_response"""
        try:
            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            if not dt_raw:
                print(f"‚ö†Ô∏è –ü–†–û–ü–£–°–ö–ê–Æ –ó–ê–ü–ò–°–¨: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ ID={appointment.get('id')}")
                return False
            scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))
            chat_id = appointment['telegram_chat_id']
            client_name = extract_first_name(appointment['client_name'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞
            if await self.check_notification_sent(appointment['id'], "1h"):
                return
            
            scheduled_time = scheduled_at.strftime('%d.%m.%Y %H:%M')
            print(f"‚è∞ –ì–û–¢–û–í–õ–Æ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û–ë –û–¢–°–£–¢–°–¢–í–ò–ò –û–¢–í–ï–¢–ê: –¥–ª—è {client_name} –Ω–∞ {scheduled_time}")
            
            success = await self.send_reminder_no_response(chat_id, client_name, appointment)
            if success:
                print(f"‚úÖ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–û: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É {client_name} –Ω–∞ {scheduled_time}")
                await self.log_notification_sent(appointment['id'], "1h")
        except Exception as e:
            print(f"‚ùå process_reminder_no_response error: {e}")

    async def process_reminder(self, appointment, now, reminder_type="24h"):
        try:
            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            if not dt_raw:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π: id={appointment.get('id')}")
                return False
            scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))
            chat_id = appointment['telegram_chat_id']
            client_name = extract_first_name(appointment['client_name'])
            if await self.check_notification_sent(appointment['id'], reminder_type):
                return
            success = await self.send_reminder(chat_id, client_name, appointment, reminder_type)
            if success:
                dt_raw = safe_parse_datetime(appointment['scheduled_at'])
                scheduled_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
                if dt_raw:
                    scheduled_time = dt_raw.astimezone(ZoneInfo("Europe/Kyiv")).strftime('%d.%m.%Y %H:%M')

                reminder_name = {
                    "24h": "24-–ì–û–î–ò–ù–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï",
                    "1h": "1-–ì–û–î–ò–ù–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï"
                }.get(reminder_type, f"–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï {reminder_type}")

                print(f"‚è∞ –û–¢–ü–†–ê–í–ò–õ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï '{reminder_name}' –ö–õ–ò–ï–ù–¢–£ {client_name} –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ {scheduled_time}")
                await self.log_notification_sent(appointment['id'], reminder_type)
        except Exception as e:
            print(f"‚ùå process_reminder error: {e}")

    async def send_reminder_no_response(self, chat_id, client_name, appointment):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞ no_response"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏
            if not self.is_working_hours():
                print(f"‚è∞ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (8:00-21:00), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
                return False
            
            template_path = "templates/ua/reminder_no_response.txt"
            if not os.path.exists(template_path):
                print(f"‚ùå –®–∞–±–ª–æ–Ω {template_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False

            with open(template_path, 'r', encoding='utf-8') as f:
                template = f.read()

            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            if not dt_raw:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π: id={appointment.get('id')}")
                return False
            scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))

            formatted_date = scheduled_at.strftime("%d.%m.%Y")
            formatted_time = scheduled_at.strftime("%H:%M")
            days_text = get_days_text(scheduled_at.date())

            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –µ—Å–ª–∏ —ç—Ç–æ –ø–∞–∫–µ—Ç —É—Å–ª—É–≥
            package_description = ""
            appointment_type = appointment.get('appointment_type', 'single')
            if appointment_type == "package":
                try:
                    package_description = await self.get_package_description(appointment['id'])
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞: {e}")
                    package_description = "–∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º–∞—Å–∞–∂"

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —à–∞–±–ª–æ–Ω–µ
            template = self.process_template_conditions(template, {
                'appointment_type': appointment_type,
                'package_description': package_description
            })

            message = template.format(
                client_name=client_name,
                date=formatted_date,
                time=formatted_time,
                duration=appointment.get('duration', ''),
                days_text=days_text,
                package_description=package_description
            )

            # –î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{appointment['id']}"),
                    InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_{appointment['id']}")
                ],
                [
                    InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"reschedule_{appointment['id']}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.application.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)
            
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")
            return False

    async def send_reminder(self, chat_id, client_name, appointment, reminder_type):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏
            if not self.is_working_hours():
                print(f"‚è∞ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (8:00-21:00), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {reminder_type} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
                return False
            template_path = f"templates/ua/reminder_{reminder_type}.txt"
            if not os.path.exists(template_path):
                print(f"‚ùå –®–∞–±–ª–æ–Ω {template_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False

            with open(template_path, 'r', encoding='utf-8') as f:
                template = f.read()

            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            if not dt_raw:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π: id={appointment.get('id')}")
                return False
            scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))

            formatted_date = scheduled_at.strftime("%d.%m.%Y")
            formatted_time = scheduled_at.strftime("%H:%M")
            days_text = get_days_text(scheduled_at.date())

            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –µ—Å–ª–∏ —ç—Ç–æ –ø–∞–∫–µ—Ç —É—Å–ª—É–≥
            package_description = ""
            appointment_type = appointment.get('appointment_type', 'single')
            if appointment_type == "package":
                try:
                    package_description = await self.get_package_description(appointment['id'])
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞: {e}")
                    package_description = "–∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º–∞—Å–∞–∂"

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —à–∞–±–ª–æ–Ω–µ
            template = self.process_template_conditions(template, {
                'appointment_type': appointment_type,
                'package_description': package_description
            })

            message = template.format(
                client_name=client_name,
                date=formatted_date,
                time=formatted_time,
                duration=appointment['duration'],
                days_text=days_text,
                package_description=package_description
            )

            # –î–ª—è 24-—á–∞—Å–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            if reminder_type == "24h":
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–æ–∫
                extended_message = message + "\n\n" + (
                    "‚è±Ô∏è –ö–Ω–æ–ø–∫–∏ –¥—ñ—é—Ç—å –¥–æ –∫—ñ–Ω—Ü—è –¥–Ω—è. –Ø–∫—â–æ –≤–æ–Ω–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é:\n"
                    "üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏ - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏\n"
                    "üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å - —à–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å\n"
                    "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å - —à–≤–∏–¥–∫–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è"
                )
                
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{appointment['id']}"),
                        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_{appointment['id']}")
                    ],
                    [
                        InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"reschedule_{appointment['id']}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await self.application.bot.send_message(chat_id=chat_id, text=extended_message, reply_markup=reply_markup)
            elif reminder_type == "no_response":
                # –î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                extended_message = message + "\n\n" + (
                    "‚è±Ô∏è –ö–Ω–æ–ø–∫–∏ –¥—ñ—é—Ç—å –æ–±–º–µ–∂–µ–Ω–∏–π —á–∞—Å. –Ø–∫—â–æ –≤–æ–Ω–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é:"
                )
                
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{appointment['id']}"),
                        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_{appointment['id']}")
                    ],
                    [
                        InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"reschedule_{appointment['id']}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await self.application.bot.send_message(chat_id=chat_id, text=extended_message, reply_markup=reply_markup)
            else:
                # –î–ª—è 1-—á–∞—Å–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                await self.application.bot.send_message(chat_id=chat_id, text=message)
            
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")
            return False


    async def send_confirmation_notification(self, query, appointment_id: str, client_name: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏
            if not self.is_working_hours():
                print(f"‚è∞ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (8:00-21:00), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
                await query.edit_message_text(f"‚úÖ –î—è–∫—É—î–º–æ, {client_name}! –í–∞—à–∞ –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.")
                return
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
            appointment_response = self.supabase.table("appointments").select(
                "scheduled_at, service_id, appointment_type, total_duration"
            ).eq("id", appointment_id).execute()

            if not appointment_response.data:
                await query.edit_message_text(f"‚úÖ –î—è–∫—É—î–º–æ, {client_name}! –í–∞—à–∞ –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.")
                return

            appointment = appointment_response.data[0]

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
            service_response = self.supabase.table("services").select(
                "name"
            ).eq("id", appointment['service_id']).execute()

            service_name = service_response.data[0]['name'] if service_response.data else "–º–∞—Å–∞–∂"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            if not dt_raw:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Å –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ—é –¥–∞—Ç–æ—é: id={appointment_id}")
                await query.edit_message_text(f"‚úÖ –î—è–∫—É—î–º–æ, {client_name}! –í–∞—à–∞ –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.")
                return
            scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))

            formatted_date = scheduled_at.strftime("%d.%m.%Y")
            formatted_time = scheduled_at.strftime("%H:%M")
            
            # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
            template_path = "templates/ua/confirmation.txt"
            if not os.path.exists(template_path):
                await query.edit_message_text(f"‚úÖ –î—è–∫—É—î–º–æ, {client_name}! –í–∞—à–∞ –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.")
                return

            with open(template_path, 'r', encoding='utf-8') as f:
                template = f.read()

            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –µ—Å–ª–∏ —ç—Ç–æ –ø–∞–∫–µ—Ç —É—Å–ª—É–≥
            package_description = ""
            appointment_type = appointment.get('appointment_type', 'single')
            if appointment_type == "package":
                try:
                    package_description = await self.get_package_description(appointment_id)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞: {e}")
                    package_description = "–∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º–∞—Å–∞–∂"

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —à–∞–±–ª–æ–Ω–µ
            template = self.process_template_conditions(template, {
                'appointment_type': appointment_type,
                'package_description': package_description
            })

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = template.format(
                client_name=client_name,
                date=formatted_date,
                time=formatted_time,
                package_description=package_description
            )

            await query.edit_message_text(message)
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", exc_info=True)
            await query.edit_message_text(f"‚úÖ –î—è–∫—É—î–º–æ, {client_name}! –í–∞—à–∞ –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.")

    async def update_user_activity(self, chat_id: str, client_id: str = None, client_name: str = None, command: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é PostgreSQL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.supabase.rpc('update_user_activity_stats', {
                'p_chat_id': chat_id,
                'p_client_id': client_id,
                'p_client_name': client_name,
                'p_command': command
            }).execute()
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            print(f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò: {str(e)}")

    async def get_daily_stats(self, date=None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        try:
            if date is None:
                date = datetime.now(ZoneInfo("Europe/Kyiv")).date()

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            stats_resp = self.supabase.table("user_activity_stats").select(
                "chat_id, client_name, first_activity_at, last_activity_at, interaction_count, commands_used"
            ).eq("activity_date", date.isoformat()).execute()

            if not stats_resp.data:
                return {
                    'total_users': 0,
                    'total_interactions': 0,
                    'users': []
                }

            total_users = len(stats_resp.data)
            total_interactions = sum(user['interaction_count'] for user in stats_resp.data)

            return {
                'total_users': total_users,
                'total_interactions': total_interactions,
                'users': stats_resp.data
            }

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò: {str(e)}")
            return None

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            chat_id = str(update.effective_chat.id)
            if chat_id != str(self.admin_chat_id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now(ZoneInfo("Europe/Kyiv")).date()
            yesterday = today - timedelta(days=1)

            today_stats = await self.get_daily_stats(today)
            yesterday_stats = await self.get_daily_stats(yesterday)

            if not today_stats:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô\n\n"

            message += f"üìÖ –°–ï–ì–û–î–ù–Ø ({today.strftime('%d.%m.%Y')}):\n"
            message += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {today_stats['total_users']}\n"
            message += f"üí¨ –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {today_stats['total_interactions']}\n\n"

            if yesterday_stats:
                message += f"üìÖ –í–ß–ï–†–ê ({yesterday.strftime('%d.%m.%Y')}):\n"
                message += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {yesterday_stats['total_users']}\n"
                message += f"üí¨ –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {yesterday_stats['total_interactions']}\n\n"

                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –¥–Ω–µ–º
                users_diff = today_stats['total_users'] - yesterday_stats['total_users']
                interactions_diff = today_stats['total_interactions'] - yesterday_stats['total_interactions']

                message += f"üìà –°–†–ê–í–ù–ï–ù–ò–ï –° –í–ß–ï–†–ê:\n"
                message += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_diff:+d}\n"
                message += f"üí¨ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {interactions_diff:+d}\n\n"

                # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
                if today_stats['users']:
                    top_users = sorted(today_stats['users'], key=lambda x: x['interaction_count'], reverse=True)[:3]
                    message += f"üèÜ –¢–û–ü-3 –ê–ö–¢–ò–í–ù–´–•:\n"
                    for i, user in enumerate(top_users, 1):
                        name = user.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                        interactions = user['interaction_count']
                        message += f"{i}. {name} - {interactions} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π\n"
                else:
                    message += f"üìã –°–µ–≥–æ–¥–Ω—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {today_stats['total_users']}\n"

            await update.message.reply_text(message)

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –í –°–¢–ê–¢–ò–°–¢–ò–ö–ï: {str(e)}")
            await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    async def handle_appointment_confirmation(self, query, appointment_id: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            print(f"‚úÖ –ö–õ–ò–ï–ù–¢ –ü–û–î–¢–í–ï–†–î–ò–õ –ü–ï–†–ï–ù–ï–°–ï–ù–ù–£–Æ –ó–ê–ü–ò–°–¨: ID {appointment_id}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            appointment_resp = self.supabase.table("appointments").select(
                "client_id, scheduled_at, service_id, status"
            ).eq("id", appointment_id).execute()

            if not appointment_resp.data:
                await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return

            appointment = appointment_resp.data[0]

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_resp = self.supabase.table("clients").select("name").eq("id", appointment['client_id']).execute()
            full_name = client_resp.data[0]['name'] if client_resp.data else "–ö–ª—ñ—î–Ω—Ç"
            client_name = extract_first_name(full_name)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ "confirmed"
            self.supabase.table("appointments").update({
                "confirmation_status": "confirmed",
                "client_confirmed": True,
                "confirmation_time": datetime.now(ZoneInfo("Europe/Kyiv")).isoformat()
            }).eq("id", appointment_id).execute()

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            if dt_raw:
                dt = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))
                formatted_date = dt.strftime("%d.%m.%Y")
                formatted_time = dt.strftime("%H:%M")

                print(f"‚úÖ –ö–õ–ò–ï–ù–¢ {client_name} –ü–û–î–¢–í–ï–†–î–ò–õ –ó–ê–ü–ò–°–¨ –Ω–∞ {formatted_date} –≤ {formatted_time}")

                await query.edit_message_text(
                    f"‚úÖ –î—è–∫—É—î–º–æ, {client_name}!\n\n"
                    f"–í–∞—à–∞ –∑–∞–ø–∏—Å –Ω–∞ {formatted_date} –æ {formatted_time} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.\n\n"
                    f"–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! üëã"
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                service_resp = self.supabase.table("services").select("name").eq("id", appointment['service_id']).execute()
                service_name = service_resp.data[0]['name'] if service_resp.data else "–º–∞—Å–∞–∂"

                await self.application.bot.send_message(
                    chat_id=self.admin_chat_id,
                    text=f"‚úÖ –ö–ª—ñ—î–Ω—Ç {client_name} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—É –∑–∞–ø–∏—Å\n"
                         f"üíÜ {service_name}\n"
                         f"üìÖ {formatted_date} –æ {formatted_time}"
                )
            else:
                await query.edit_message_text(f"‚úÖ –î—è–∫—É—î–º–æ, {client_name}! –í–∞—à–∞ –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.")

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –ó–ê–ü–ò–°–ò {appointment_id}: {str(e)}")
            await query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    async def send_client_reschedule_notification(self, query, appointment_id: str, client_name: str, old_date: str, old_time: str, new_date: str, new_time: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏
            if not self.is_working_hours():
                print(f"‚è∞ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (8:00-21:00), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
                await query.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ {new_date} –æ {new_time}.")
                return
            
            # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
            template_path = "templates/ua/client_reschedule.txt"
            if not os.path.exists(template_path):
                await query.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ {new_date} –æ {new_time}.")
                return

            with open(template_path, 'r', encoding='utf-8') as f:
                template = f.read()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–æ–≤
            appointment_response = self.supabase.table("appointments").select(
                "appointment_type, total_duration"
            ).eq("id", appointment_id).execute()

            package_description = ""
            appointment_type = "single"
            if appointment_response.data:
                appointment_type = appointment_response.data[0].get('appointment_type', 'single')
                if appointment_type == "package":
                    try:
                        package_description = await self.get_package_description(appointment_id)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞: {e}")
                        package_description = "–∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º–∞—Å–∞–∂"

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —à–∞–±–ª–æ–Ω–µ
            template = self.process_template_conditions(template, {
                'appointment_type': appointment_type,
                'package_description': package_description
            })

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = template.format(
                client_name=client_name,
                old_date=old_date,
                old_time=old_time,
                new_date=new_date,
                new_time=new_time,
                package_description=package_description
            )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton(f"‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ {new_date} {new_time}", callback_data=f"confirm_appointment_{appointment_id}")],
                [InlineKeyboardButton("üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_admin")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–Ω–æ—Å–µ", exc_info=True)
            await query.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ {new_date} –æ {new_time}.")

    async def send_cancellation_notification(self, query, appointment_id: str, client_name: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏
            if not self.is_working_hours():
                print(f"‚è∞ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (8:00-21:00), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
                await query.edit_message_text(f"‚ùå –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ, {client_name}.")
                return
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
            appointment_response = self.supabase.table("appointments").select(
                "scheduled_at, service_id, appointment_type, total_duration"
            ).eq("id", appointment_id).execute()
            
            if not appointment_response.data:
                await query.edit_message_text(f"‚ùå –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ, {client_name}.")
                return
                
            appointment = appointment_response.data[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
            service_response = self.supabase.table("services").select(
                "name"
            ).eq("id", appointment['service_id']).execute()
            
            service_name = service_response.data[0]['name'] if service_response.data else "–º–∞—Å–∞–∂"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            if not dt_raw:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Å –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ—é –¥–∞—Ç–æ—é: id={appointment_id}")
                await query.edit_message_text(f"‚ùå –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ, {client_name}.")
                return
            scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))

            formatted_date = scheduled_at.strftime("%d.%m.%Y")
            formatted_time = scheduled_at.strftime("%H:%M")
            
            # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
            template_path = "templates/ua/cancellation.txt"
            if not os.path.exists(template_path):
                await query.edit_message_text(f"‚ùå –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ, {client_name}.")
                return

            with open(template_path, 'r', encoding='utf-8') as f:
                template = f.read()

            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –µ—Å–ª–∏ —ç—Ç–æ –ø–∞–∫–µ—Ç —É—Å–ª—É–≥
            package_description = ""
            appointment_type = appointment.get('appointment_type', 'single')
            if appointment_type == "package":
                try:
                    package_description = await self.get_package_description(appointment_id)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞: {e}")
                    package_description = "–∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º–∞—Å–∞–∂"

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —à–∞–±–ª–æ–Ω–µ
            template = self.process_template_conditions(template, {
                'appointment_type': appointment_type,
                'package_description': package_description
            })

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = template.format(
                client_name=client_name,
                date=formatted_date,
                time=formatted_time,
                package_description=package_description
            )

            await query.edit_message_text(message)
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ", exc_info=True)
            await query.edit_message_text(f"‚ùå –ó–∞–ø–∏—Å –æ—Ç–º–µ–Ω–µ–Ω–æ, {client_name}.")

    async def send_new_appointment_notification(self, appointment_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç—É (—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)"""
        try:
            print(f"üì® –û–¢–ü–†–ê–í–õ–Ø–Æ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ù–û–í–û–ô –ó–ê–ü–ò–°–ò: ID {appointment_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            if await self.check_notification_sent(appointment_id, "new_appointment"):
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ {appointment_id} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")
                return True

            now = datetime.now(ZoneInfo("Europe/Kyiv"))
            if not self.is_working_hours(now):
                print(f"‚è∞ –í–ù–ï –†–ê–ë–û–ß–ï–ì–û –í–†–ï–ú–ï–ù–ò: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ {appointment_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
                return False
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            appointment_response = self.supabase.table("appointments").select(
                "id, scheduled_at, client_id, service_id, status, appointment_type, total_duration"
            ).eq("id", appointment_id).execute()

            if not appointment_response.data:
                logger.error(f"‚ùå –ó–∞–ø–∏—Å {appointment_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False

            appointment = appointment_response.data[0]

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_response = self.supabase.table("clients").select(
                "name, telegram_chat_id, notification_opt_in"
            ).eq("id", appointment['client_id']).execute()

            if not client_response.data:
                logger.error(f"‚ùå –ö–ª—ñ—î–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å—É {appointment_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False

            client = client_response.data[0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç –∫ –±–æ—Ç—É –∏ —Å–æ–≥–ª–∞—Å–µ–Ω –ª–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if not client.get('telegram_chat_id') or not client.get('notification_opt_in'):
                print(f"‚ùå –ö–ª—ñ—î–Ω—Ç {client.get('name', 'Unknown')} –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ –±–æ—Ç–∞ –∞–±–æ –Ω–µ –ø–æ–≥–æ–¥–∏–≤—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —É—Å–ª—É–≥–µ/–ø–∞–∫–µ—Ç–µ
            appointment_type = appointment.get('appointment_type', 'single')

            if appointment_type == 'package':
                # –î–ª—è –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
                package_description = await self.get_package_description(appointment_id)
                if not package_description:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id}")
                    return False
                service_info = {
                    'name': '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º–∞—Å–∞–∂',
                    'package_description': package_description
                }
            else:
                # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —É—Å–ª—É–≥ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã services
                service_response = self.supabase.table("services").select(
                    "name, duration_minutes"
                ).eq("id", appointment['service_id']).execute()

                if not service_response.data:
                    print(f"‚ùå –ü–æ—Å–ª—É–≥–∞ –¥–ª—è –∑–∞–ø–∏—Å—É {appointment_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                    return False

                service_info = service_response.data[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ 24-—á–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            if not dt_raw:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π: id={appointment.get('id')}")
                return False
            scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))
            
            now = datetime.now(ZoneInfo("Europe/Kyiv"))
            tomorrow_start = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
            tomorrow_end = tomorrow_start + timedelta(days=1)
            
            # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ø—Ä–æ–≤–µ—Ä–∫–∞ 24-—á–∞—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –ø–æ–ø–∞–¥–∞–µ—Ç –≤ 24-—á–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            # (–≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 24-—á–∞—Å–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
            logger.info(f"üìÖ –ó–∞–ø–∏—Å—å –Ω–∞: {scheduled_at.strftime('%d.%m.%Y %H:%M')}, 24h –∏–Ω—Ç–µ—Ä–≤–∞–ª: {tomorrow_start.strftime('%d.%m.%Y %H:%M')} - {tomorrow_end.strftime('%d.%m.%Y %H:%M')}")
            # if tomorrow_start <= scheduled_at < tomorrow_end:
            #     logger.info(f"üìù –ó–∞–ø–∏—Å—å {appointment_id} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ 24-—á–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
            #     return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 24-—á–∞—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
            if await self.check_notification_sent(appointment_id, "24h"):
                client_name = extract_first_name(appointment['client_name'])
                scheduled_time = scheduled_at.strftime('%d.%m.%Y %H:%M')
                logger.info(f"üìù –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê {client_name} –Ω–∞ {scheduled_time} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 24-—á–∞—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                return True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            template_path = "templates/ua/new_appointment.txt"
            if not os.path.exists(template_path):
                print(f"‚ùå –®–∞–±–ª–æ–Ω {template_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            with open(template_path, 'r', encoding='utf-8') as f:
                template = f.read()

            formatted_date = scheduled_at.strftime("%d.%m.%Y")
            formatted_time = scheduled_at.strftime("%H:%M")

            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            package_description = service_info.get('package_description', '') if appointment_type == 'package' else ''

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —à–∞–±–ª–æ–Ω–µ
            template = self.process_template_conditions(template, {
                'appointment_type': appointment_type,
                'package_description': package_description
            })

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = template.format(
                client_name=client['name'],
                date=formatted_date,
                time=formatted_time,
                package_description=package_description,
                duration=service_info.get('duration_minutes', '')
            )

            client_display_name = extract_first_name(client['name'])
            print(f"üì§ –û–¢–ü–†–ê–í–ò–õ –ö–õ–ò–ï–ù–¢–£ {client_display_name} –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ù–û–í–û–ô –ó–ê–ü–ò–°–ò –Ω–∞ {formatted_date} –≤ {formatted_time}")
            await self.application.bot.send_message(chat_id=client['telegram_chat_id'], text=message)
            print(f"‚úÖ –ö–õ–ò–ï–ù–¢ {client_display_name} –ü–û–õ–£–ß–ò–õ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ó–ê–ü–ò–°–ò")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            try:
                if appointment_type == 'package':
                    admin_message = f"üÜï –ù–æ–≤–∞ –∑–∞–ø–∏—Å –≤—ñ–¥ {client['name']}\nüíÜ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º–∞—Å–∞–∂: {service_info['package_description']}\nüìÖ {formatted_date} –æ {formatted_time}"
                else:
                    admin_message = f"üÜï –ù–æ–≤–∞ –∑–∞–ø–∏—Å –≤—ñ–¥ {client['name']}\nüíÜ {service_info['name']}\nüìÖ {formatted_date} –æ {formatted_time}"

                await self.application.bot.send_message(
                    chat_id=self.admin_chat_id,
                    text=admin_message
                )
                logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
            except Exception as admin_error:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É", exc_info=True)

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            await self.log_notification_sent(appointment_id, "new_appointment")

            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {extract_first_name(client['name'])}")
            return True

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏", exc_info=True)
            return False

    async def get_package_description(self, appointment_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —É—Å–ª—É–≥ –¥–ª—è –∑–∞–ø–∏—Å–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
            appointment_resp = self.supabase.table("appointments").select(
                "service_id, appointment_type"
            ).eq("id", appointment_id).execute()

            if not appointment_resp.data:
                print(f"‚ö†Ô∏è –ó–ê–ü–ò–°–¨ –ù–ï –ù–ê–ô–î–ï–ù–ê: {appointment_id} (–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞)")
                return ""

            appointment = appointment_resp.data[0]
            appointment_type = appointment.get('appointment_type', 'single')

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–∞–∫–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            if appointment_type != 'package':
                return ""

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
            service_resp = self.supabase.table("services").select(
                "name"
            ).eq("id", appointment['service_id']).execute()

            if service_resp.data:
                service_name = service_resp.data[0]['name']
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
                if '–∫–æ–º–ø–ª–µ–∫—Å' in service_name.lower() or '–ø–∞–∫–µ—Ç' in service_name.lower():
                    print(f"üì¶ –ü–ê–ö–ï–¢ –û–ë–†–ê–ë–û–¢–ê–ù: {appointment_id} -> {service_name}")
                    return service_name
                else:
                    package_desc = f"–∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º–∞—Å–∞–∂ ({service_name})"
                    print(f"üì¶ –ü–ê–ö–ï–¢ –û–ë–†–ê–ë–û–¢–ê–ù: {appointment_id} -> {package_desc}")
                    return package_desc
            else:
                print(f"üì¶ –ü–ê–ö–ï–¢ –û–ë–†–ê–ë–û–¢–ê–ù: {appointment_id} -> –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º–∞—Å–∞–∂ (—É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
                return "–∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º–∞—Å–∞–∂"

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –û–ü–ò–°–ê–ù–ò–Ø –ü–ê–ö–ï–¢–ê: {appointment_id} - {str(e)}")
            return "–∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º–∞—Å–∞–∂"

    def process_template_conditions(self, template: str, context: dict) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —à–∞–±–ª–æ–Ω–∞—Ö"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ {if:condition}...{else}...{/if} –∏–ª–∏ {if:condition}...{/if}
        pattern = r'\{if:([^}]+)\}(.*?)(?:\{else\}(.*?))?\{/if\}'
        
        def replace_condition(match):
            condition = match.group(1).strip()
            if_content = match.group(2)
            else_content = match.group(3) if match.group(3) is not None else ""
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º —É—Å–ª–æ–≤–∏–µ
            try:
                # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏–π —Ç–∏–ø–∞ "appointment_type == 'package'"
                if "==" in condition:
                    var_name, expected_value = condition.split("==", 1)
                    var_name = var_name.strip()
                    expected_value = expected_value.strip().strip('"').strip("'")
                    
                    actual_value = context.get(var_name, "")
                    
                    if actual_value == expected_value:
                        return if_content
                    else:
                        return else_content
                else:
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                    if context.get(condition.strip()):
                        return if_content
                    else:
                        return else_content
                        
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ª–æ–≤–∏—è '{condition}': {e}")
                return else_content
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        processed_template = re.sub(pattern, replace_condition, template, flags=re.DOTALL)
        
        return processed_template

    async def send_admin_reschedule_notification(self, appointment_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏
            if not self.is_working_hours():
                print(f"‚è∞ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (8:00-21:00), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
                return False
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            appointment_response = self.supabase.table("appointments").select(
                "id, scheduled_at, client_id, service_id, status, reschedule_source, client_confirmed"
            ).eq("id", appointment_id).execute()
            
            if not appointment_response.data:
                print(f"‚ùå –ó–∞–ø–∏—Å—å {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
            appointment = appointment_response.data[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if appointment.get('reschedule_source') != 'ADMIN' or appointment.get('client_confirmed') == True:
                print(f"‚ùå –ó–∞–ø–∏—Å—å {appointment_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–æ—Å–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_response = self.supabase.table("clients").select(
                "name, telegram_chat_id, notification_opt_in"
            ).eq("id", appointment['client_id']).execute()
            
            if not client_response.data:
                print(f"‚ùå –ö–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            client = client_response.data[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç –∫ –±–æ—Ç—É –∏ —Å–æ–≥–ª–∞—Å–µ–Ω –ª–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if not client.get('telegram_chat_id') or not client.get('notification_opt_in'):
                print(f"‚ùå –ö–ª—ñ—î–Ω—Ç {client.get('name', 'Unknown')} –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ –±–æ—Ç–∞ –∞–±–æ –Ω–µ –ø–æ–≥–æ–¥–∏–≤—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
            service_response = self.supabase.table("services").select(
                "name, duration_minutes"
            ).eq("id", appointment['service_id']).execute()
            
            if not service_response.data:
                print(f"‚ùå –ü–æ—Å–ª—É–≥–∞ –¥–ª—è –∑–∞–ø–∏—Å—É {appointment_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                return False
                
            service = service_response.data[0]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            if not dt_raw:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π: id={appointment.get('id')}")
                return False
            scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))
            
            formatted_date = scheduled_at.strftime("%d.%m.%Y")
            formatted_time = scheduled_at.strftime("%H:%M")
            
            # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            template_path = "templates/ua/admin_reschedule.txt"
            if not os.path.exists(template_path):
                print(f"‚ùå –®–∞–±–ª–æ–Ω {template_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                message = (
                    f"üîÑ {extract_first_name(client['name'])}, –≤–∞—à –∑–∞–ø–∏—Å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
                    f"üìÖ –ù–æ–≤–∏–π —á–∞—Å: {formatted_date} –æ {formatted_time}\n\n"
                    f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–æ–≤–∏–π —á–∞—Å –∑–∞–ø–∏—Å—É –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –π–æ–≥–æ."
                )
            else:
                with open(template_path, 'r', encoding='utf-8') as f:
                    template = f.read()

                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –µ—Å–ª–∏ —ç—Ç–æ –ø–∞–∫–µ—Ç —É—Å–ª—É–≥
                package_description = ""
                appointment_type = appointment.get('appointment_type', 'single')
                if appointment_type == "package":
                    try:
                        package_description = await self.get_package_description(appointment_id)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞: {e}")
                        package_description = "–∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º–∞—Å–∞–∂"

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —à–∞–±–ª–æ–Ω–µ
                template = self.process_template_conditions(template, {
                    'appointment_type': appointment_type,
                    'package_description': package_description
                })

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    message = template.format(
                        client_name=extract_first_name(client['name']),
                        new_date=formatted_date,
                        new_time=formatted_time,
                        package_description=package_description
                    )
                    print(f"‚úÖ –®–ê–ë–õ–û–ù –û–ë–†–ê–ë–û–¢–ê–ù: admin_reschedule.txt –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {extract_first_name(client['name'])}")
                except KeyError as e:
                    print(f"‚ùå –û–®–ò–ë–ö–ê –®–ê–ë–õ–û–ù–ê: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {e} –≤ admin_reschedule.txt")
                    print(f"   –®–∞–±–ª–æ–Ω: {template[:100]}...")
                    raise e
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{appointment_id}")],
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_{appointment_id}")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"reschedule_{appointment_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await self.application.bot.send_message(
                chat_id=client['telegram_chat_id'],
                text=message,
                reply_markup=reply_markup
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            await self.log_notification_sent(appointment_id, "admin_reschedule")

            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {extract_first_name(client['name'])}")
            return True
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", exc_info=True)
            return False

    async def send_delayed_notifications(self, now):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã –∏–∑-–∑–∞ –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            print("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º 24-—á–∞—Å–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã
            # –ù–û —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –ù–ï –ü–†–û–®–õ–ò
            tomorrow_start = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
            tomorrow_end = tomorrow_start + timedelta(days=1)

            delayed_24h_response = self.supabase.table("appointments").select(
                "id, scheduled_at, client_id, service_id, status, appointment_type, total_duration"
            ).eq("status", "scheduled").gte("scheduled_at", tomorrow_start.isoformat()).lt("scheduled_at", tomorrow_end.isoformat()).execute()

            delayed_24h_count = 0
            if delayed_24h_response.data:
                print(f"üì≠ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ {len(delayed_24h_response.data)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö 24-–≥–æ–¥–∏–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")
                for appointment in delayed_24h_response.data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞
                    dt_raw = safe_parse_datetime(appointment['scheduled_at'])
                    if not dt_raw:
                        logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π: id={appointment.get('id')}")
                        continue # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å
                    appointment_time = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞
                    if appointment_time > now:
                        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
                        last_check_time = now - timedelta(hours=1)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ —á–∞—Å –Ω–∞–∑–∞–¥

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                        recent_logs = self.supabase.table("notification_logs").select(
                            "sent_at, type"
                        ).eq("appointment_id", appointment['id']).eq("type", "24h").eq("status", "sent").gte("sent_at", last_check_time.isoformat()).execute()

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –ª–æ–≥–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
                        if not recent_logs.data:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 24-—á–∞—Å–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                            if not await self.check_notification_sent(appointment['id'], "24h"):
                                await self.process_appointment_reminder(appointment, now, "24h")
                                delayed_24h_count += 1
                    else:
                        print(f"‚è∞ –ó–∞–ø–∏—Å {appointment['id']} –Ω–∞ {appointment_time} –≤–∂–µ –ø—Ä–æ–π—à–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ 24-–≥–æ–¥–∏–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º 1-—á–∞—Å–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã
            # –ù–û —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –ù–ï –ü–†–û–®–õ–ò (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º)
            one_hour_from_now = now + timedelta(hours=1)
            one_hour_start = one_hour_from_now.replace(minute=0, second=0, microsecond=0)
            one_hour_end = one_hour_start + timedelta(hours=1)

            delayed_1h_response = self.supabase.table("appointments").select(
                "id, scheduled_at, client_id, service_id, status"
            ).eq("status", "scheduled").gte("scheduled_at", one_hour_start.isoformat()).lt("scheduled_at", one_hour_end.isoformat()).execute()

            delayed_1h_count = 0
            if delayed_1h_response.data:
                print(f"üì≠ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ {len(delayed_1h_response.data)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö 1-–≥–æ–¥–∏–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")
                for appointment in delayed_1h_response.data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å (–≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
                    dt_raw = safe_parse_datetime(appointment['scheduled_at'])
                    if not dt_raw:
                        logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π: id={appointment.get('id')}")
                        continue # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å
                    appointment_time = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
                    if appointment_time > now:
                        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                        last_check_time = now - timedelta(minutes=30)  # –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–≥–ª–∞ –±—ã—Ç—å 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π 30 –º–∏–Ω—É—Ç
                        recent_logs = self.supabase.table("notification_logs").select(
                            "sent_at, type"
                        ).eq("appointment_id", appointment['id']).eq("type", "1h").eq("status", "sent").gte("sent_at", last_check_time.isoformat()).execute()

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –ª–æ–≥–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
                        if not recent_logs.data:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 1-—á–∞—Å–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                            if not await self.check_notification_sent(appointment['id'], "1h"):
                                await self.process_appointment_reminder(appointment, now, "1h")
                                delayed_1h_count += 1
                    else:
                        print(f"‚è∞ –ó–∞–ø–∏—Å {appointment['id']} –Ω–∞ {appointment_time} –≤–∂–µ –ø—Ä–æ–π—à–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ 1-–≥–æ–¥–∏–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")

            if delayed_24h_count > 0 or delayed_1h_count > 0:
                print(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: 24h={delayed_24h_count}, 1h={delayed_1h_count}")
            else:
                print("üì≠ –í—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–µ–º–∞—î")
                        
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: {e}")

    def is_working_hours(self, current_time=None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (8:00-21:00)"""
        if current_time is None:
            current_time = datetime.now(ZoneInfo("Europe/Kyiv"))
        
        # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: —Å 8:00 –¥–æ 21:00
        start_hour = 8
        end_hour = 21
        
        current_hour = current_time.hour
        
        return start_hour <= current_hour < end_hour

    async def check_no_response_reminder(self, appointment, now):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        try:
            appointment_id = appointment['id']

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ client_id
            client_response = self.supabase.table("clients").select("name").eq("id", appointment['client_id']).execute()
            client_name = "–ö–ª—ñ—î–Ω—Ç"
            if client_response.data:
                client_name = extract_first_name(client_response.data[0]['name'])

            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ–≥–æ –ª–æ–≥–∞
            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            appointment_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
            if dt_raw:
                appointment_time = dt_raw.astimezone(ZoneInfo("Europe/Kyiv")).strftime('%d.%m.%Y %H:%M')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 24-—á–∞—Å–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if not await self.check_notification_sent(appointment_id, "24h"):
                print(f"üìù 24-–ì–û–î–ò–ù–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ö–õ–ò–ï–ù–¢–£ {client_name} –Ω–∞ {appointment_time} –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞
            if await self.check_notification_sent(appointment_id, "1h"):
                print(f"üìù –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û–ë –û–¢–°–£–¢–°–¢–í–ò–ò –û–¢–í–ï–¢–ê –ö–õ–ò–ï–ù–¢–£ {client_name} –Ω–∞ {appointment_time} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 6 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 24-—á–∞—Å–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            notification_log_response = self.supabase.table("notification_logs").select(
                "sent_at"
            ).eq("appointment_id", appointment_id).eq("type", "24h").execute()
            
            if not notification_log_response.data:
                print(f"üìù –õ–û–ì 24-–ì–û–î–ò–ù–ù–û–ì–û –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–£ {client_name} –Ω–∞ {appointment_time} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            dt_raw = safe_parse_datetime(notification_log_response.data[0]['sent_at'])
            if not dt_raw:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –∫–ª–∏–µ–Ω—Ç={client_name}, –≤—Ä–µ–º—è={appointment_time}")
                return
            notification_time = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))

            time_since_24h_reminder = now - notification_time

            if time_since_24h_reminder < timedelta(hours=6):
                hours_passed = time_since_24h_reminder.total_seconds() / 3600
                print(f"üìù –° –ú–û–ú–ï–ù–¢–ê 24-–ì–û–î–ò–ù–ù–û–ì–û –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–£ {client_name} –Ω–∞ {appointment_time} –ø—Ä–æ—à–ª–æ —Ç–æ–ª—å–∫–æ {hours_passed:.1f} —á–∞—Å–æ–≤ (–º–∏–Ω–∏–º—É–º 6)")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤)
            if time_since_24h_reminder > timedelta(hours=24):
                hours_passed = time_since_24h_reminder.total_seconds() / 3600
                print(f"üìù –° –ú–û–ú–ï–ù–¢–ê 24-–ì–û–î–ò–ù–ù–û–ì–û –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–£ {client_name} –Ω–∞ {appointment_time} –ø—Ä–æ—à–ª–æ {hours_passed:.1f} —á–∞—Å–æ–≤ (>24), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø–∏—Å—å
            appointment_response = self.supabase.table("appointments").select(
                "client_confirmed"
            ).eq("id", appointment_id).execute()
            
            if appointment_response.data and appointment_response.data[0].get('client_confirmed'):
                print(f"üìù –ö–õ–ò–ï–ù–¢ {client_name} –£–ñ–ï –ü–û–î–¢–í–ï–†–î–ò–õ –ó–ê–ü–ò–°–¨ –Ω–∞ {appointment_time}")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞ no_response
            await self.process_appointment_reminder_no_response(appointment, now)
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–∞", exc_info=True)

    async def check_notification_sent(self, appointment_id: str, notification_type: str) -> bool:
        try:
            response = self.supabase.table("notification_logs") \
                .select("id") \
                .eq("appointment_id", appointment_id) \
                .eq("type", notification_type) \
                .eq("status", "sent") \
                .execute()
            return len(response.data) > 0
        except Exception as e:
            print("‚ùå check_notification_sent error:", e)
            return False

    async def log_notification_sent(self, appointment_id: str, notification_type: str):
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ISO —Ñ–æ—Ä–º–∞—Ç–∞
            now = datetime.now(ZoneInfo("Europe/Kyiv"))
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –¥–æ 6 —Ü–∏—Ñ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ISO —Ñ–æ—Ä–º–∞—Ç–∞
            now = now.replace(microsecond=now.microsecond // 10 * 10)

            log_data = {
                "appointment_id": appointment_id,
                "type": notification_type,
                "sent_at": now.isoformat(),
                "status": "sent"
            }

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'sent'
            existing = self.supabase.table("notification_logs") \
                .select("id") \
                .eq("appointment_id", appointment_id) \
                .eq("type", notification_type) \
                .eq("status", "sent") \
                .execute()

            if existing.data:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                self.supabase.table("notification_logs") \
                    .update({"sent_at": now.isoformat()}) \
                    .eq("appointment_id", appointment_id) \
                    .eq("type", notification_type) \
                    .eq("status", "sent") \
                    .execute()
            else:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                self.supabase.table("notification_logs").insert(log_data).execute()

            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ: {appointment_id} - {notification_type}")

        except Exception as e:
            print("‚ùå log_notification_sent error:", e)
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å–º–æ–≥–ª–∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å

    async def should_send_admin_reschedule_notification(self, appointment_id: str, scheduled_at: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞.
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
            existing_notifications = self.supabase.table("notification_logs") \
                .select("id, sent_at") \
                .eq("appointment_id", appointment_id) \
                .eq("type", "admin_reschedule") \
                .eq("status", "sent") \
                .execute()

            if existing_notifications.data:
                # –ï—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                last_notification = existing_notifications.data[0]
                last_sent_time = safe_parse_datetime(last_notification['sent_at'])

                if last_sent_time:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
                    appointment_response = self.supabase.table("appointments") \
                        .select("updated_at") \
                        .eq("id", appointment_id) \
                        .execute()

                    if appointment_response.data:
                        updated_at = safe_parse_datetime(appointment_response.data[0].get('updated_at'))
                        if updated_at and updated_at > last_sent_time:
                            # –ó–∞–ø–∏—Å—å –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            print(f"üîÑ –û–¢–ü–†–ê–í–õ–Ø–Æ –ù–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ü–ï–†–ï–ù–û–°–ï –ó–ê–ü–ò–°–ò {appointment_id} (–∑–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞)")
                            return True
                        else:
                            # –ó–∞–ø–∏—Å—å –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            print(f"‚è∞ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ü–ï–†–ï–ù–û–°–ï –ó–ê–ü–ò–°–ò {appointment_id} –£–ñ–ï –û–¢–ü–†–ê–í–õ–ï–ù–û")
                            return False

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ
            print(f"üîÑ –û–¢–ü–†–ê–í–õ–Ø–Æ –ü–ï–†–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ü–ï–†–ï–ù–û–°–ï –ó–ê–ü–ò–°–ò {appointment_id}")
            return True

        except Exception as e:
            print(f"‚ùå should_send_admin_reschedule_notification error: {e}")
            return False  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    async def my_appointments_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            chat_id = str(update.effective_chat.id)
            telegram_name = update.effective_chat.first_name or update.effective_chat.username or "Unknown"

            client_resp = self.supabase.table("clients").select("id, name").eq("telegram_chat_id", chat_id).execute()
            if not client_resp.data:
                print(f"‚ùå –ö–õ–ò–ï–ù–¢ –ù–ï –ù–ê–ô–î–ï–ù: {telegram_name}, —á–∞—Ç {chat_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                await update.message.reply_text("‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start.")
                return

            full_name = client_resp.data[0]['name']
            client_name = extract_first_name(full_name)
            client_id = client_resp.data[0]['id']
            print(f"üìã –ö–õ–ò–ï–ù–¢ {client_name} –ó–ê–ü–†–û–°–ò–õ –°–ü–ò–°–û–ö –°–í–û–ò–• –ó–ê–ü–ò–°–ï–ô (—á–∞—Ç {chat_id})")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.update_user_activity(chat_id, client_id, client_name, "my_appointments")
            now = datetime.now(ZoneInfo("Europe/Kyiv"))

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (scheduled) –∏ –ø—Ä–æ—à–µ–¥—à–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
            active_appointments = self.supabase.table("appointments").select(
                "scheduled_at, service_id, status, client_confirmed"
            ).eq("client_id", client_id).eq("status", "scheduled").gte("scheduled_at", now.isoformat()).order("scheduled_at").execute().data or []

            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
            week_ago = now - timedelta(days=7)
            cancelled_appointments = self.supabase.table("appointments").select(
                "scheduled_at, service_id, status, client_confirmed"
            ).eq("client_id", client_id).eq("status", "cancelled").gte("scheduled_at", week_ago.isoformat()).order("scheduled_at").execute().data or []

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            appointments = active_appointments + cancelled_appointments

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            appointments.sort(key=lambda x: x['scheduled_at'])
            if not appointments:
                print(f"üìã –£ –ö–õ–ò–ï–ù–¢–ê {client_name} –ù–ï–¢ –ê–ö–¢–ò–í–ù–´–• –ó–ê–ü–ò–°–ï–ô")
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –º–∞–π–±—É—Ç–Ω—ñ—Ö –∞–±–æ –Ω–µ–¥–∞–≤–Ω—ñ—Ö —Å–∫–∞—Å–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤.")
                return

            print(f"üìã –ü–û–ö–ê–ó–´–í–ê–Æ –°–ü–ò–°–û–ö –ó–ê–ü–ò–°–ï–ô: {len(appointments)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {client_name}")

            service_ids = list(set(a['service_id'] for a in appointments))
            services = self.supabase.table("services").select("id, name").in_("id", service_ids).execute().data
            service_map = {s['id']: s['name'] for s in services}
            status_map = {
                'scheduled': '–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ',
                'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
                'cancelled': '–°–∫–∞—Å–æ–≤–∞–Ω–æ',
                'no_show': "–ù–µ –∑'—è–≤–∏–≤—Å—è"
            }
            msg = f"–í–∞—à—ñ –∑–∞–ø–∏—Å–∏, {client_name}:\n\n"
            for a in appointments:
                dt_raw = safe_parse_datetime(a['scheduled_at'])
                if not dt_raw:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π: id={a.get('id')}")
                    continue # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å
                dt = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —É—á–µ—Ç–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                if a['status'] == 'scheduled' and a.get('client_confirmed') == True:
                    status = '–¢–∏ –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤'
                else:
                    status = status_map.get(a['status'], a['status'])

                msg += f"üìÖ {dt.strftime('%d.%m.%Y %H:%M')} ({status})\n"
            await update.message.reply_text(msg)
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ my_appointments_command", exc_info=True)
            try:
                await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    async def support_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ú–∞—î—à –∑–∞–ø–∏—Ç–∞–Ω–Ω—è - –¥–∑–≤–æ–Ω–∏ (096) 35-102-35")

    async def quick_reschedule_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–Ω–æ—Å—É –∑–∞–ø–∏—Å–∏"""
        try:
            chat_id = str(update.effective_chat.id)
            telegram_name = update.effective_chat.first_name or update.effective_chat.username or "Unknown"

            client_resp = self.supabase.table("clients").select("id, name").eq("telegram_chat_id", chat_id).execute()
            if not client_resp.data:
                print(f"‚ùå –ö–õ–ò–ï–ù–¢ –ù–ï –ù–ê–ô–î–ï–ù: {telegram_name}, —á–∞—Ç {chat_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                await update.message.reply_text("‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start.")
                return
            
            full_name = client_resp.data[0]['name']
            client_name = extract_first_name(full_name)
            client_id = client_resp.data[0]['id']
            print(f"üîÑ –ö–õ–ò–ï–ù–¢ {client_name} –ó–ê–ü–†–û–°–ò–õ –ü–ï–†–ï–ù–û–° –ó–ê–ü–ò–°–ò (—á–∞—Ç {chat_id})")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.update_user_activity(chat_id, client_id, client_name, "reschedule")
            now = datetime.now(ZoneInfo("Europe/Kyiv"))
            
            # –ü–æ–ª—É—á–∞–µ–º –±—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
            appointments = self.supabase.table("appointments").select(
                "id, scheduled_at, service_id, status"
            ).eq("client_id", client_id).eq("status", "scheduled").gte("scheduled_at", now.isoformat()).order("scheduled_at").execute().data
            
            if not appointments:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –º–∞–π–±—É—Ç–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è.")
                return
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
            if len(appointments) == 1:
                appointment = appointments[0]
                await self.show_reschedule_dates_for_appointment(update, appointment['id'])
            else:
                # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
                await self.show_appointments_for_reschedule(update, appointments)
                
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ quick_reschedule_command", exc_info=True)
            try:
                await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    async def quick_cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏"""
        try:
            chat_id = str(update.effective_chat.id)
            telegram_name = update.effective_chat.first_name or update.effective_chat.username or "Unknown"

            client_resp = self.supabase.table("clients").select("id, name").eq("telegram_chat_id", chat_id).execute()
            if not client_resp.data:
                print(f"‚ùå –ö–õ–ò–ï–ù–¢ –ù–ï –ù–ê–ô–î–ï–ù: {telegram_name}, —á–∞—Ç {chat_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                await update.message.reply_text("‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start.")
                return
            
            full_name = client_resp.data[0]['name']
            client_name = extract_first_name(full_name)
            client_id = client_resp.data[0]['id']
            print(f"‚ùå –ö–õ–ò–ï–ù–¢ {client_name} –ó–ê–ü–†–û–°–ò–õ –û–¢–ú–ï–ù–£ –ó–ê–ü–ò–°–ò (—á–∞—Ç {chat_id})")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.update_user_activity(chat_id, client_id, client_name, "cancel")
            now = datetime.now(ZoneInfo("Europe/Kyiv"))
            
            # –ü–æ–ª—É—á–∞–µ–º –±—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
            appointments = self.supabase.table("appointments").select(
                "id, scheduled_at, service_id, status"
            ).eq("client_id", client_id).eq("status", "scheduled").gte("scheduled_at", now.isoformat()).order("scheduled_at").execute().data
            
            if not appointments:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –º–∞–π–±—É—Ç–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
                return
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å, —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å
            if len(appointments) == 1:
                appointment = appointments[0]
                await self.show_cancel_confirmation(update, appointment['id'])
            else:
                # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
                await self.show_appointments_for_cancel(update, appointments)
                
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ quick_cancel_command", exc_info=True)
            try:
                await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    async def confirm_appointments_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–ø–∏—Å–µ–π"""
        try:
            chat_id = str(update.effective_chat.id)
            telegram_name = update.effective_chat.first_name or update.effective_chat.username or "Unknown"

            client_resp = self.supabase.table("clients").select("id, name").eq("telegram_chat_id", chat_id).execute()
            if not client_resp.data:
                print(f"‚ùå –ö–õ–ò–ï–ù–¢ –ù–ï –ù–ê–ô–î–ï–ù: {telegram_name}, —á–∞—Ç {chat_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                await update.message.reply_text("‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start.")
                return

            full_name = client_resp.data[0]['name']
            client_name = extract_first_name(full_name)
            client_id = client_resp.data[0]['id']
            print(f"‚úÖ –ö–õ–ò–ï–ù–¢ {client_name} –ó–ê–ü–†–û–°–ò–õ –°–ü–ò–°–û–ö –ó–ê–ü–ò–°–ï–ô –î–õ–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø (—á–∞—Ç {chat_id})")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.update_user_activity(chat_id, client_id, client_name, "confirm")
            now = datetime.now(ZoneInfo("Europe/Kyiv"))

            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–±—É–¥—É—â–∏–µ)
            appointments = self.supabase.table("appointments").select(
                "id, scheduled_at, service_id, status, client_confirmed"
            ).eq("client_id", client_id).eq("status", "scheduled").eq("client_confirmed", False).gte("scheduled_at", now.isoformat()).order("scheduled_at").execute().data

            if not appointments:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
                return

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å, —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
            if len(appointments) == 1:
                appointment = appointments[0]
                await self.show_confirm_confirmation(update, appointment['id'])
            else:
                # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
                await self.show_appointments_for_confirm(update, appointments)

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ confirm_appointments_command", exc_info=True)
            try:
                await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    async def show_confirm_confirmation(self, update_or_query, appointment_id: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã Update –∏–ª–∏ CallbackQuery
            if hasattr(update_or_query, 'effective_chat'):
                # –≠—Ç–æ Update –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                chat_id = str(update_or_query.effective_chat.id)
                send_message = update_or_query.message.reply_text
            else:
                # –≠—Ç–æ CallbackQuery
                chat_id = str(update_or_query.effective_chat.id)
                send_message = update_or_query.edit_message_text

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            appointment_resp = self.supabase.table("appointments").select(
                "scheduled_at, service_id, client_id"
            ).eq("id", appointment_id).execute()

            if not appointment_resp.data:
                await send_message("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return

            appointment = appointment_resp.data[0]

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_resp = self.supabase.table("clients").select("name").eq("id", appointment['client_id']).execute()
            full_name = client_resp.data[0]['name'] if client_resp.data else "–ö–ª—ñ—î–Ω—Ç"
            client_name = extract_first_name(full_name)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
            service_resp = self.supabase.table("services").select("name").eq("id", appointment['service_id']).execute()
            service_name = service_resp.data[0]['name'] if service_resp.data else "–º–∞—Å–∞–∂"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            if not dt_raw:
                await send_message("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –¥–∞—Ç—ñ –∑–∞–ø–∏—Å—É")
                return
            scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))
            formatted_date = scheduled_at.strftime("%d.%m.%Y")
            formatted_time = scheduled_at.strftime("%H:%M")

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            message = (
                f"üîî –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–ø–∏—Å:\n\n"
                f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                f"üïê –ß–∞—Å: {formatted_time}\n\n"
                f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ü—é –∑–∞–ø–∏—Å."
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{appointment_id}")],
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_{appointment_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await send_message(message, reply_markup=reply_markup)

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ show_confirm_confirmation", exc_info=True)
            try:
                if hasattr(update_or_query, 'effective_chat'):
                    await update_or_query.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                else:
                    await update_or_query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    async def show_appointments_for_confirm(self, update_or_query, appointments):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã Update –∏–ª–∏ CallbackQuery
            if hasattr(update_or_query, 'effective_chat'):
                # –≠—Ç–æ Update –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                send_message = update_or_query.message.reply_text
            else:
                # –≠—Ç–æ CallbackQuery
                send_message = update_or_query.edit_message_text

            if not appointments:
                await send_message("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
                return

            message = "–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:\n\n"

            keyboard = []
            for appointment in appointments:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
                service_resp = self.supabase.table("services").select("name").eq("id", appointment['service_id']).execute()
                service_name = service_resp.data[0]['name'] if service_resp.data else "–º–∞—Å–∞–∂"

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                dt_raw = safe_parse_datetime(appointment['scheduled_at'])
                if dt_raw:
                    dt = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))
                    formatted_date = dt.strftime("%d.%m.%Y")
                    formatted_time = dt.strftime("%H:%M")
                    display_text = f"{formatted_date} {formatted_time}"

                    keyboard.append([
                        InlineKeyboardButton(display_text, callback_data=f"select_confirm_{appointment['id']}")
                    ])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await send_message(message, reply_markup=reply_markup)

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ show_appointments_for_confirm", exc_info=True)
            try:
                if hasattr(update_or_query, 'effective_chat'):
                    await update_or_query.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                else:
                    await update_or_query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    async def show_reschedule_dates_for_appointment(self, update_or_query, appointment_id: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã Update –∏–ª–∏ CallbackQuery
            if hasattr(update_or_query, 'effective_chat'):
                # –≠—Ç–æ Update –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                chat_id = str(update_or_query.effective_chat.id)
                send_message = update_or_query.message.reply_text
            elif hasattr(update_or_query, 'callback_query') and update_or_query.callback_query:
                # –≠—Ç–æ Update —Å callback_query
                query = update_or_query.callback_query
                chat_id = str(query.message.chat.id)
                send_message = query.edit_message_text
            elif hasattr(update_or_query, 'message') and update_or_query.message:
                # –≠—Ç–æ CallbackQuery
                query = update_or_query
                chat_id = str(query.message.chat.id)
                send_message = query.edit_message_text
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: {type(update_or_query)}")
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            appointment_response = self.supabase.table("appointments").select(
                "scheduled_at, service_id"
            ).eq("id", appointment_id).execute()

            if not appointment_response.data:
                await send_message("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            appointment = appointment_response.data[0]
            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            if not dt_raw:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π: id={appointment.get('id')}")
                await send_message("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return
            scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ (7 –¥–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            now = datetime.now(ZoneInfo("Europe/Kyiv"))
            dates = []
            for i in range(1, 8):
                date = now.date() + timedelta(days=i)
                if date.weekday() != 6:  # –ò—Å–∫–ª—é—á–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    dates.append(date)
            
            if not dates:
                await send_message("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
            keyboard = []
            for date in dates:
                date_str = date.strftime("%d.%m.%Y")
                day_name = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"][date.weekday()]
                keyboard.append([InlineKeyboardButton(f"{day_name}, {date_str}", callback_data=f"reschedule_date_{date_str}")])
            
            keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="reschedule_cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
            self.user_states[chat_id] = {
                'state': BotState.RESCHEDULE_DATE,
                'appointment_id': appointment_id
            }
            
            await send_message(
                f"üîÑ –û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:\n"
                f"üìÖ –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞: {scheduled_at.strftime('%d.%m.%Y %H:%M')}",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ show_reschedule_dates_for_appointment", exc_info=True)
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                if hasattr(update_or_query, 'effective_chat'):
                    await update_or_query.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                elif hasattr(update_or_query, 'callback_query') and update_or_query.callback_query:
                    await update_or_query.callback_query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                elif hasattr(update_or_query, 'message'):
                    await update_or_query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    async def show_appointments_for_reschedule(self, update_or_query, appointments):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã Update –∏–ª–∏ CallbackQuery
            if hasattr(update_or_query, 'effective_chat'):
                # –≠—Ç–æ Update –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                send_message = update_or_query.message.reply_text
            elif hasattr(update_or_query, 'callback_query') and update_or_query.callback_query:
                # –≠—Ç–æ Update —Å callback_query
                send_message = update_or_query.callback_query.edit_message_text
            elif hasattr(update_or_query, 'message') and update_or_query.message:
                # –≠—Ç–æ CallbackQuery
                send_message = update_or_query.edit_message_text
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: {type(update_or_query)}")
                return

            keyboard = []
            for appointment in appointments:
                dt_raw = safe_parse_datetime(appointment['scheduled_at'])
                if not dt_raw:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π: id={appointment.get('id')}")
                    continue # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å
                scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))
                
                date_str = scheduled_at.strftime("%d.%m.%Y %H:%M")
                keyboard.append([InlineKeyboardButton(f"üìÖ {date_str}", callback_data=f"select_reschedule_{appointment['id']}")])
            
            keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="reschedule_cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await send_message(
                "üîÑ –û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ show_appointments_for_reschedule", exc_info=True)
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                if hasattr(update_or_query, 'effective_chat'):
                    await update_or_query.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                elif hasattr(update_or_query, 'callback_query') and update_or_query.callback_query:
                    await update_or_query.callback_query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                elif hasattr(update_or_query, 'message'):
                    await update_or_query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    async def show_cancel_confirmation(self, update_or_query, appointment_id: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã Update –∏–ª–∏ CallbackQuery
            if hasattr(update_or_query, 'effective_chat'):
                # –≠—Ç–æ Update –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                send_message = update_or_query.message.reply_text
            elif hasattr(update_or_query, 'callback_query') and update_or_query.callback_query:
                # –≠—Ç–æ Update —Å callback_query
                query = update_or_query.callback_query
                send_message = query.edit_message_text
            elif hasattr(update_or_query, 'message') and update_or_query.message:
                # –≠—Ç–æ CallbackQuery
                query = update_or_query
                send_message = query.edit_message_text
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: {type(update_or_query)}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            appointment_response = self.supabase.table("appointments").select(
                "scheduled_at, service_id"
            ).eq("id", appointment_id).execute()
            
            if not appointment_response.data:
                await send_message("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            appointment = appointment_response.data[0]
            dt_raw = safe_parse_datetime(appointment['scheduled_at'])
            if not dt_raw:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π: id={appointment.get('id')}")
                await send_message("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return
            scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data=f"cancel_{appointment_id}")],
                [InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="reschedule_cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await send_message(
                f"‚ùå –í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å?\n"
                f"üìÖ –î–∞—Ç–∞: {scheduled_at.strftime('%d.%m.%Y %H:%M')}",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ show_cancel_confirmation", exc_info=True)
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                if hasattr(update_or_query, 'effective_chat'):
                    await update_or_query.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                elif hasattr(update_or_query, 'callback_query') and update_or_query.callback_query:
                    await update_or_query.callback_query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                elif hasattr(update_or_query, 'message'):
                    await update_or_query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    async def show_appointments_for_cancel(self, update_or_query, appointments):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã Update –∏–ª–∏ CallbackQuery
            if hasattr(update_or_query, 'effective_chat'):
                # –≠—Ç–æ Update –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                send_message = update_or_query.message.reply_text
            elif hasattr(update_or_query, 'callback_query') and update_or_query.callback_query:
                # –≠—Ç–æ Update —Å callback_query
                send_message = update_or_query.callback_query.edit_message_text
            elif hasattr(update_or_query, 'message') and update_or_query.message:
                # –≠—Ç–æ CallbackQuery
                send_message = update_or_query.edit_message_text
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: {type(update_or_query)}")
                return

            keyboard = []
            for appointment in appointments:
                dt_raw = safe_parse_datetime(appointment['scheduled_at'])
                if not dt_raw:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π: id={appointment.get('id')}")
                    continue # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å
                scheduled_at = dt_raw.astimezone(ZoneInfo("Europe/Kyiv"))
                
                date_str = scheduled_at.strftime("%d.%m.%Y %H:%M")
                keyboard.append([InlineKeyboardButton(f"üìÖ {date_str}", callback_data=f"select_cancel_{appointment['id']}")])
            
            keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="reschedule_cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await send_message(
                "‚ùå –û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ show_appointments_for_cancel", exc_info=True)
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                if hasattr(update_or_query, 'effective_chat'):
                    await update_or_query.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                elif hasattr(update_or_query, 'callback_query') and update_or_query.callback_query:
                    await update_or_query.callback_query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                elif hasattr(update_or_query, 'message'):
                    await update_or_query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass

    def run(self):
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–µ
        import asyncio
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        # –ó–∞–ø—É—Å–∫–∞–µ–º scheduler –≤ event loop
        loop.run_until_complete(self.start_scheduler())

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        self.application.run_polling()

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_key = os.getenv("SUPABASE_KEY")
    admin_chat_id = os.getenv("ADMIN_CHAT_ID") # <-- –î–æ–±–∞–≤–∏–ª–∏
    if not all([token, supabase_url, supabase_key, admin_chat_id]): # <-- –î–æ–±–∞–≤–∏–ª–∏
        logger.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        return
    bot = MassageReminderBot(token, supabase_url, supabase_key, admin_chat_id) # <-- –ü–µ—Ä–µ–¥–∞–µ–º –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    bot.run()

if __name__ == "__main__":
    main()